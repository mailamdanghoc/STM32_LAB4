
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003218  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003324  08003324  00004324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003348  08003348  00005048  2**0
                  CONTENTS
  4 .ARM          00000000  08003348  08003348  00005048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003348  08003348  00005048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003348  08003348  00004348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800334c  0800334c  0000434c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  08003350  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000048  08003398  00005048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000694  08003398  00005694  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b69  00000000  00000000  00005071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e93  00000000  00000000  0000dbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0000fa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000082d  00000000  00000000  00010540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183d7  00000000  00000000  00010d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eaf2  00000000  00000000  00029144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008495f  00000000  00000000  00037c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d4  00000000  00000000  000bc5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  000befac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	0800330c 	.word	0x0800330c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	0800330c 	.word	0x0800330c

0800014c <update7SEG>:
const int MAX_LED = 4;
int index_led = 0;


void update7SEG ( int index )
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch ( index )
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	d870      	bhi.n	800023c <update7SEG+0xf0>
 800015a:	a201      	add	r2, pc, #4	@ (adr r2, 8000160 <update7SEG+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000171 	.word	0x08000171
 8000164:	080001a3 	.word	0x080001a3
 8000168:	080001d5 	.word	0x080001d5
 800016c:	08000207 	.word	0x08000207
	{
		case 0:
			// Display the first 7 SEG with led_buffer [0]
			HAL_GPIO_WritePin ( en0_GPIO_Port , en0_Pin ,GPIO_PIN_RESET ) ;
 8000170:	2200      	movs	r2, #0
 8000172:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000176:	4834      	ldr	r0, [pc, #208]	@ (8000248 <update7SEG+0xfc>)
 8000178:	f002 f8b1 	bl	80022de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en1_GPIO_Port , en1_Pin ,GPIO_PIN_SET ) ;
 800017c:	2201      	movs	r2, #1
 800017e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000182:	4831      	ldr	r0, [pc, #196]	@ (8000248 <update7SEG+0xfc>)
 8000184:	f002 f8ab 	bl	80022de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en2_GPIO_Port , en2_Pin ,GPIO_PIN_SET ) ;
 8000188:	2201      	movs	r2, #1
 800018a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800018e:	482e      	ldr	r0, [pc, #184]	@ (8000248 <update7SEG+0xfc>)
 8000190:	f002 f8a5 	bl	80022de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en3_GPIO_Port , en3_Pin ,GPIO_PIN_SET ) ;
 8000194:	2201      	movs	r2, #1
 8000196:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800019a:	482b      	ldr	r0, [pc, #172]	@ (8000248 <update7SEG+0xfc>)
 800019c:	f002 f89f 	bl	80022de <HAL_GPIO_WritePin>
			//display7SEG(led_buffer[index]);
			break ;
 80001a0:	e04d      	b.n	800023e <update7SEG+0xf2>
		case 1:
			// Display the second 7 SEG with led_buffer [1]
			HAL_GPIO_WritePin ( en0_GPIO_Port , en0_Pin ,GPIO_PIN_SET ) ;
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001a8:	4827      	ldr	r0, [pc, #156]	@ (8000248 <update7SEG+0xfc>)
 80001aa:	f002 f898 	bl	80022de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en1_GPIO_Port , en1_Pin ,GPIO_PIN_RESET ) ;
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001b4:	4824      	ldr	r0, [pc, #144]	@ (8000248 <update7SEG+0xfc>)
 80001b6:	f002 f892 	bl	80022de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en2_GPIO_Port , en2_Pin ,GPIO_PIN_SET ) ;
 80001ba:	2201      	movs	r2, #1
 80001bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001c0:	4821      	ldr	r0, [pc, #132]	@ (8000248 <update7SEG+0xfc>)
 80001c2:	f002 f88c 	bl	80022de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en3_GPIO_Port , en3_Pin ,GPIO_PIN_SET ) ;
 80001c6:	2201      	movs	r2, #1
 80001c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001cc:	481e      	ldr	r0, [pc, #120]	@ (8000248 <update7SEG+0xfc>)
 80001ce:	f002 f886 	bl	80022de <HAL_GPIO_WritePin>
			//display7SEG(led_buffer[index]);
			break ;
 80001d2:	e034      	b.n	800023e <update7SEG+0xf2>
		case 2:
			// Display the third 7 SEG with led_buffer [2]
			HAL_GPIO_WritePin ( en0_GPIO_Port , en0_Pin ,GPIO_PIN_SET ) ;
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001da:	481b      	ldr	r0, [pc, #108]	@ (8000248 <update7SEG+0xfc>)
 80001dc:	f002 f87f 	bl	80022de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en1_GPIO_Port , en1_Pin ,GPIO_PIN_SET ) ;
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001e6:	4818      	ldr	r0, [pc, #96]	@ (8000248 <update7SEG+0xfc>)
 80001e8:	f002 f879 	bl	80022de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en2_GPIO_Port , en2_Pin ,GPIO_PIN_RESET ) ;
 80001ec:	2200      	movs	r2, #0
 80001ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001f2:	4815      	ldr	r0, [pc, #84]	@ (8000248 <update7SEG+0xfc>)
 80001f4:	f002 f873 	bl	80022de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en3_GPIO_Port , en3_Pin ,GPIO_PIN_SET ) ;
 80001f8:	2201      	movs	r2, #1
 80001fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001fe:	4812      	ldr	r0, [pc, #72]	@ (8000248 <update7SEG+0xfc>)
 8000200:	f002 f86d 	bl	80022de <HAL_GPIO_WritePin>
			//display7SEG(led_buffer[index]);
			break ;
 8000204:	e01b      	b.n	800023e <update7SEG+0xf2>
		case 3:
			// Display the forth 7 SEG with led_buffer [3]
			HAL_GPIO_WritePin ( en0_GPIO_Port , en0_Pin ,GPIO_PIN_SET ) ;
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800020c:	480e      	ldr	r0, [pc, #56]	@ (8000248 <update7SEG+0xfc>)
 800020e:	f002 f866 	bl	80022de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en1_GPIO_Port , en1_Pin ,GPIO_PIN_SET ) ;
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000218:	480b      	ldr	r0, [pc, #44]	@ (8000248 <update7SEG+0xfc>)
 800021a:	f002 f860 	bl	80022de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en2_GPIO_Port , en2_Pin ,GPIO_PIN_SET ) ;
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000224:	4808      	ldr	r0, [pc, #32]	@ (8000248 <update7SEG+0xfc>)
 8000226:	f002 f85a 	bl	80022de <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( en3_GPIO_Port , en3_Pin ,GPIO_PIN_RESET ) ;
 800022a:	2200      	movs	r2, #0
 800022c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000230:	4805      	ldr	r0, [pc, #20]	@ (8000248 <update7SEG+0xfc>)
 8000232:	f002 f854 	bl	80022de <HAL_GPIO_WritePin>
			//display7SEG(led_buffer[index]);
			index = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	607b      	str	r3, [r7, #4]
			break ;
 800023a:	e000      	b.n	800023e <update7SEG+0xf2>
		default :
			break ;
 800023c:	bf00      	nop
	}
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40010800 	.word	0x40010800

0800024c <display7SEG>:

void display7SEG(int num)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	if (num == 0)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d122      	bne.n	80002a0 <display7SEG+0x54>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 800025a:	2200      	movs	r2, #0
 800025c:	2101      	movs	r1, #1
 800025e:	48bd      	ldr	r0, [pc, #756]	@ (8000554 <display7SEG+0x308>)
 8000260:	f002 f83d 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 8000264:	2200      	movs	r2, #0
 8000266:	2102      	movs	r1, #2
 8000268:	48ba      	ldr	r0, [pc, #744]	@ (8000554 <display7SEG+0x308>)
 800026a:	f002 f838 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 800026e:	2200      	movs	r2, #0
 8000270:	2104      	movs	r1, #4
 8000272:	48b8      	ldr	r0, [pc, #736]	@ (8000554 <display7SEG+0x308>)
 8000274:	f002 f833 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 8000278:	2200      	movs	r2, #0
 800027a:	2108      	movs	r1, #8
 800027c:	48b5      	ldr	r0, [pc, #724]	@ (8000554 <display7SEG+0x308>)
 800027e:	f002 f82e 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_RESET ) ;
 8000282:	2200      	movs	r2, #0
 8000284:	2110      	movs	r1, #16
 8000286:	48b3      	ldr	r0, [pc, #716]	@ (8000554 <display7SEG+0x308>)
 8000288:	f002 f829 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 800028c:	2200      	movs	r2, #0
 800028e:	2120      	movs	r1, #32
 8000290:	48b0      	ldr	r0, [pc, #704]	@ (8000554 <display7SEG+0x308>)
 8000292:	f002 f824 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_SET ) ;
 8000296:	2201      	movs	r2, #1
 8000298:	2140      	movs	r1, #64	@ 0x40
 800029a:	48ae      	ldr	r0, [pc, #696]	@ (8000554 <display7SEG+0x308>)
 800029c:	f002 f81f 	bl	80022de <HAL_GPIO_WritePin>
	}
	if (num == 1)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d122      	bne.n	80002ec <display7SEG+0xa0>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_SET ) ;
 80002a6:	2201      	movs	r2, #1
 80002a8:	2101      	movs	r1, #1
 80002aa:	48aa      	ldr	r0, [pc, #680]	@ (8000554 <display7SEG+0x308>)
 80002ac:	f002 f817 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 80002b0:	2200      	movs	r2, #0
 80002b2:	2102      	movs	r1, #2
 80002b4:	48a7      	ldr	r0, [pc, #668]	@ (8000554 <display7SEG+0x308>)
 80002b6:	f002 f812 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 80002ba:	2200      	movs	r2, #0
 80002bc:	2104      	movs	r1, #4
 80002be:	48a5      	ldr	r0, [pc, #660]	@ (8000554 <display7SEG+0x308>)
 80002c0:	f002 f80d 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_SET ) ;
 80002c4:	2201      	movs	r2, #1
 80002c6:	2108      	movs	r1, #8
 80002c8:	48a2      	ldr	r0, [pc, #648]	@ (8000554 <display7SEG+0x308>)
 80002ca:	f002 f808 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 80002ce:	2201      	movs	r2, #1
 80002d0:	2110      	movs	r1, #16
 80002d2:	48a0      	ldr	r0, [pc, #640]	@ (8000554 <display7SEG+0x308>)
 80002d4:	f002 f803 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_SET ) ;
 80002d8:	2201      	movs	r2, #1
 80002da:	2120      	movs	r1, #32
 80002dc:	489d      	ldr	r0, [pc, #628]	@ (8000554 <display7SEG+0x308>)
 80002de:	f001 fffe 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_SET ) ;
 80002e2:	2201      	movs	r2, #1
 80002e4:	2140      	movs	r1, #64	@ 0x40
 80002e6:	489b      	ldr	r0, [pc, #620]	@ (8000554 <display7SEG+0x308>)
 80002e8:	f001 fff9 	bl	80022de <HAL_GPIO_WritePin>
	}
	if (num == 2)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d122      	bne.n	8000338 <display7SEG+0xec>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 80002f2:	2200      	movs	r2, #0
 80002f4:	2101      	movs	r1, #1
 80002f6:	4897      	ldr	r0, [pc, #604]	@ (8000554 <display7SEG+0x308>)
 80002f8:	f001 fff1 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 80002fc:	2200      	movs	r2, #0
 80002fe:	2102      	movs	r1, #2
 8000300:	4894      	ldr	r0, [pc, #592]	@ (8000554 <display7SEG+0x308>)
 8000302:	f001 ffec 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_SET ) ;
 8000306:	2201      	movs	r2, #1
 8000308:	2104      	movs	r1, #4
 800030a:	4892      	ldr	r0, [pc, #584]	@ (8000554 <display7SEG+0x308>)
 800030c:	f001 ffe7 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 8000310:	2200      	movs	r2, #0
 8000312:	2108      	movs	r1, #8
 8000314:	488f      	ldr	r0, [pc, #572]	@ (8000554 <display7SEG+0x308>)
 8000316:	f001 ffe2 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_RESET ) ;
 800031a:	2200      	movs	r2, #0
 800031c:	2110      	movs	r1, #16
 800031e:	488d      	ldr	r0, [pc, #564]	@ (8000554 <display7SEG+0x308>)
 8000320:	f001 ffdd 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_SET ) ;
 8000324:	2201      	movs	r2, #1
 8000326:	2120      	movs	r1, #32
 8000328:	488a      	ldr	r0, [pc, #552]	@ (8000554 <display7SEG+0x308>)
 800032a:	f001 ffd8 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 800032e:	2200      	movs	r2, #0
 8000330:	2140      	movs	r1, #64	@ 0x40
 8000332:	4888      	ldr	r0, [pc, #544]	@ (8000554 <display7SEG+0x308>)
 8000334:	f001 ffd3 	bl	80022de <HAL_GPIO_WritePin>
	}
	if (num == 3)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2b03      	cmp	r3, #3
 800033c:	d122      	bne.n	8000384 <display7SEG+0x138>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 800033e:	2200      	movs	r2, #0
 8000340:	2101      	movs	r1, #1
 8000342:	4884      	ldr	r0, [pc, #528]	@ (8000554 <display7SEG+0x308>)
 8000344:	f001 ffcb 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 8000348:	2200      	movs	r2, #0
 800034a:	2102      	movs	r1, #2
 800034c:	4881      	ldr	r0, [pc, #516]	@ (8000554 <display7SEG+0x308>)
 800034e:	f001 ffc6 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 8000352:	2200      	movs	r2, #0
 8000354:	2104      	movs	r1, #4
 8000356:	487f      	ldr	r0, [pc, #508]	@ (8000554 <display7SEG+0x308>)
 8000358:	f001 ffc1 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 800035c:	2200      	movs	r2, #0
 800035e:	2108      	movs	r1, #8
 8000360:	487c      	ldr	r0, [pc, #496]	@ (8000554 <display7SEG+0x308>)
 8000362:	f001 ffbc 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 8000366:	2201      	movs	r2, #1
 8000368:	2110      	movs	r1, #16
 800036a:	487a      	ldr	r0, [pc, #488]	@ (8000554 <display7SEG+0x308>)
 800036c:	f001 ffb7 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_SET ) ;
 8000370:	2201      	movs	r2, #1
 8000372:	2120      	movs	r1, #32
 8000374:	4877      	ldr	r0, [pc, #476]	@ (8000554 <display7SEG+0x308>)
 8000376:	f001 ffb2 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 800037a:	2200      	movs	r2, #0
 800037c:	2140      	movs	r1, #64	@ 0x40
 800037e:	4875      	ldr	r0, [pc, #468]	@ (8000554 <display7SEG+0x308>)
 8000380:	f001 ffad 	bl	80022de <HAL_GPIO_WritePin>
	}
	if (num == 4)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2b04      	cmp	r3, #4
 8000388:	d122      	bne.n	80003d0 <display7SEG+0x184>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_SET ) ;
 800038a:	2201      	movs	r2, #1
 800038c:	2101      	movs	r1, #1
 800038e:	4871      	ldr	r0, [pc, #452]	@ (8000554 <display7SEG+0x308>)
 8000390:	f001 ffa5 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 8000394:	2200      	movs	r2, #0
 8000396:	2102      	movs	r1, #2
 8000398:	486e      	ldr	r0, [pc, #440]	@ (8000554 <display7SEG+0x308>)
 800039a:	f001 ffa0 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 800039e:	2200      	movs	r2, #0
 80003a0:	2104      	movs	r1, #4
 80003a2:	486c      	ldr	r0, [pc, #432]	@ (8000554 <display7SEG+0x308>)
 80003a4:	f001 ff9b 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_SET ) ;
 80003a8:	2201      	movs	r2, #1
 80003aa:	2108      	movs	r1, #8
 80003ac:	4869      	ldr	r0, [pc, #420]	@ (8000554 <display7SEG+0x308>)
 80003ae:	f001 ff96 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 80003b2:	2201      	movs	r2, #1
 80003b4:	2110      	movs	r1, #16
 80003b6:	4867      	ldr	r0, [pc, #412]	@ (8000554 <display7SEG+0x308>)
 80003b8:	f001 ff91 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 80003bc:	2200      	movs	r2, #0
 80003be:	2120      	movs	r1, #32
 80003c0:	4864      	ldr	r0, [pc, #400]	@ (8000554 <display7SEG+0x308>)
 80003c2:	f001 ff8c 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 80003c6:	2200      	movs	r2, #0
 80003c8:	2140      	movs	r1, #64	@ 0x40
 80003ca:	4862      	ldr	r0, [pc, #392]	@ (8000554 <display7SEG+0x308>)
 80003cc:	f001 ff87 	bl	80022de <HAL_GPIO_WritePin>
	}
	if (num == 5)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2b05      	cmp	r3, #5
 80003d4:	d122      	bne.n	800041c <display7SEG+0x1d0>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 80003d6:	2200      	movs	r2, #0
 80003d8:	2101      	movs	r1, #1
 80003da:	485e      	ldr	r0, [pc, #376]	@ (8000554 <display7SEG+0x308>)
 80003dc:	f001 ff7f 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_SET ) ;
 80003e0:	2201      	movs	r2, #1
 80003e2:	2102      	movs	r1, #2
 80003e4:	485b      	ldr	r0, [pc, #364]	@ (8000554 <display7SEG+0x308>)
 80003e6:	f001 ff7a 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 80003ea:	2200      	movs	r2, #0
 80003ec:	2104      	movs	r1, #4
 80003ee:	4859      	ldr	r0, [pc, #356]	@ (8000554 <display7SEG+0x308>)
 80003f0:	f001 ff75 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 80003f4:	2200      	movs	r2, #0
 80003f6:	2108      	movs	r1, #8
 80003f8:	4856      	ldr	r0, [pc, #344]	@ (8000554 <display7SEG+0x308>)
 80003fa:	f001 ff70 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 80003fe:	2201      	movs	r2, #1
 8000400:	2110      	movs	r1, #16
 8000402:	4854      	ldr	r0, [pc, #336]	@ (8000554 <display7SEG+0x308>)
 8000404:	f001 ff6b 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 8000408:	2200      	movs	r2, #0
 800040a:	2120      	movs	r1, #32
 800040c:	4851      	ldr	r0, [pc, #324]	@ (8000554 <display7SEG+0x308>)
 800040e:	f001 ff66 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 8000412:	2200      	movs	r2, #0
 8000414:	2140      	movs	r1, #64	@ 0x40
 8000416:	484f      	ldr	r0, [pc, #316]	@ (8000554 <display7SEG+0x308>)
 8000418:	f001 ff61 	bl	80022de <HAL_GPIO_WritePin>
	}
	if (num == 6)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b06      	cmp	r3, #6
 8000420:	d122      	bne.n	8000468 <display7SEG+0x21c>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 8000422:	2200      	movs	r2, #0
 8000424:	2101      	movs	r1, #1
 8000426:	484b      	ldr	r0, [pc, #300]	@ (8000554 <display7SEG+0x308>)
 8000428:	f001 ff59 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_SET ) ;
 800042c:	2201      	movs	r2, #1
 800042e:	2102      	movs	r1, #2
 8000430:	4848      	ldr	r0, [pc, #288]	@ (8000554 <display7SEG+0x308>)
 8000432:	f001 ff54 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 8000436:	2200      	movs	r2, #0
 8000438:	2104      	movs	r1, #4
 800043a:	4846      	ldr	r0, [pc, #280]	@ (8000554 <display7SEG+0x308>)
 800043c:	f001 ff4f 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 8000440:	2200      	movs	r2, #0
 8000442:	2108      	movs	r1, #8
 8000444:	4843      	ldr	r0, [pc, #268]	@ (8000554 <display7SEG+0x308>)
 8000446:	f001 ff4a 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_RESET ) ;
 800044a:	2200      	movs	r2, #0
 800044c:	2110      	movs	r1, #16
 800044e:	4841      	ldr	r0, [pc, #260]	@ (8000554 <display7SEG+0x308>)
 8000450:	f001 ff45 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 8000454:	2200      	movs	r2, #0
 8000456:	2120      	movs	r1, #32
 8000458:	483e      	ldr	r0, [pc, #248]	@ (8000554 <display7SEG+0x308>)
 800045a:	f001 ff40 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 800045e:	2200      	movs	r2, #0
 8000460:	2140      	movs	r1, #64	@ 0x40
 8000462:	483c      	ldr	r0, [pc, #240]	@ (8000554 <display7SEG+0x308>)
 8000464:	f001 ff3b 	bl	80022de <HAL_GPIO_WritePin>
	}
	if (num == 7)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2b07      	cmp	r3, #7
 800046c:	d122      	bne.n	80004b4 <display7SEG+0x268>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 800046e:	2200      	movs	r2, #0
 8000470:	2101      	movs	r1, #1
 8000472:	4838      	ldr	r0, [pc, #224]	@ (8000554 <display7SEG+0x308>)
 8000474:	f001 ff33 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 8000478:	2200      	movs	r2, #0
 800047a:	2102      	movs	r1, #2
 800047c:	4835      	ldr	r0, [pc, #212]	@ (8000554 <display7SEG+0x308>)
 800047e:	f001 ff2e 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 8000482:	2200      	movs	r2, #0
 8000484:	2104      	movs	r1, #4
 8000486:	4833      	ldr	r0, [pc, #204]	@ (8000554 <display7SEG+0x308>)
 8000488:	f001 ff29 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_SET ) ;
 800048c:	2201      	movs	r2, #1
 800048e:	2108      	movs	r1, #8
 8000490:	4830      	ldr	r0, [pc, #192]	@ (8000554 <display7SEG+0x308>)
 8000492:	f001 ff24 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 8000496:	2201      	movs	r2, #1
 8000498:	2110      	movs	r1, #16
 800049a:	482e      	ldr	r0, [pc, #184]	@ (8000554 <display7SEG+0x308>)
 800049c:	f001 ff1f 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_SET ) ;
 80004a0:	2201      	movs	r2, #1
 80004a2:	2120      	movs	r1, #32
 80004a4:	482b      	ldr	r0, [pc, #172]	@ (8000554 <display7SEG+0x308>)
 80004a6:	f001 ff1a 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_SET ) ;
 80004aa:	2201      	movs	r2, #1
 80004ac:	2140      	movs	r1, #64	@ 0x40
 80004ae:	4829      	ldr	r0, [pc, #164]	@ (8000554 <display7SEG+0x308>)
 80004b0:	f001 ff15 	bl	80022de <HAL_GPIO_WritePin>
	}
	if (num == 8)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b08      	cmp	r3, #8
 80004b8:	d122      	bne.n	8000500 <display7SEG+0x2b4>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 80004ba:	2200      	movs	r2, #0
 80004bc:	2101      	movs	r1, #1
 80004be:	4825      	ldr	r0, [pc, #148]	@ (8000554 <display7SEG+0x308>)
 80004c0:	f001 ff0d 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 80004c4:	2200      	movs	r2, #0
 80004c6:	2102      	movs	r1, #2
 80004c8:	4822      	ldr	r0, [pc, #136]	@ (8000554 <display7SEG+0x308>)
 80004ca:	f001 ff08 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 80004ce:	2200      	movs	r2, #0
 80004d0:	2104      	movs	r1, #4
 80004d2:	4820      	ldr	r0, [pc, #128]	@ (8000554 <display7SEG+0x308>)
 80004d4:	f001 ff03 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 80004d8:	2200      	movs	r2, #0
 80004da:	2108      	movs	r1, #8
 80004dc:	481d      	ldr	r0, [pc, #116]	@ (8000554 <display7SEG+0x308>)
 80004de:	f001 fefe 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_RESET ) ;
 80004e2:	2200      	movs	r2, #0
 80004e4:	2110      	movs	r1, #16
 80004e6:	481b      	ldr	r0, [pc, #108]	@ (8000554 <display7SEG+0x308>)
 80004e8:	f001 fef9 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 80004ec:	2200      	movs	r2, #0
 80004ee:	2120      	movs	r1, #32
 80004f0:	4818      	ldr	r0, [pc, #96]	@ (8000554 <display7SEG+0x308>)
 80004f2:	f001 fef4 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 80004f6:	2200      	movs	r2, #0
 80004f8:	2140      	movs	r1, #64	@ 0x40
 80004fa:	4816      	ldr	r0, [pc, #88]	@ (8000554 <display7SEG+0x308>)
 80004fc:	f001 feef 	bl	80022de <HAL_GPIO_WritePin>
	}
	if (num == 9)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b09      	cmp	r3, #9
 8000504:	d122      	bne.n	800054c <display7SEG+0x300>
	{
		HAL_GPIO_WritePin ( a_GPIO_Port , a_Pin ,GPIO_PIN_RESET ) ;
 8000506:	2200      	movs	r2, #0
 8000508:	2101      	movs	r1, #1
 800050a:	4812      	ldr	r0, [pc, #72]	@ (8000554 <display7SEG+0x308>)
 800050c:	f001 fee7 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( b_GPIO_Port , b_Pin ,GPIO_PIN_RESET ) ;
 8000510:	2200      	movs	r2, #0
 8000512:	2102      	movs	r1, #2
 8000514:	480f      	ldr	r0, [pc, #60]	@ (8000554 <display7SEG+0x308>)
 8000516:	f001 fee2 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( c_GPIO_Port , c_Pin ,GPIO_PIN_RESET ) ;
 800051a:	2200      	movs	r2, #0
 800051c:	2104      	movs	r1, #4
 800051e:	480d      	ldr	r0, [pc, #52]	@ (8000554 <display7SEG+0x308>)
 8000520:	f001 fedd 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( d_GPIO_Port , d_Pin ,GPIO_PIN_RESET ) ;
 8000524:	2200      	movs	r2, #0
 8000526:	2108      	movs	r1, #8
 8000528:	480a      	ldr	r0, [pc, #40]	@ (8000554 <display7SEG+0x308>)
 800052a:	f001 fed8 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( e_GPIO_Port , e_Pin ,GPIO_PIN_SET ) ;
 800052e:	2201      	movs	r2, #1
 8000530:	2110      	movs	r1, #16
 8000532:	4808      	ldr	r0, [pc, #32]	@ (8000554 <display7SEG+0x308>)
 8000534:	f001 fed3 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( f_GPIO_Port , f_Pin ,GPIO_PIN_RESET ) ;
 8000538:	2200      	movs	r2, #0
 800053a:	2120      	movs	r1, #32
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <display7SEG+0x308>)
 800053e:	f001 fece 	bl	80022de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( g_GPIO_Port , g_Pin ,GPIO_PIN_RESET ) ;
 8000542:	2200      	movs	r2, #0
 8000544:	2140      	movs	r1, #64	@ 0x40
 8000546:	4803      	ldr	r0, [pc, #12]	@ (8000554 <display7SEG+0x308>)
 8000548:	f001 fec9 	bl	80022de <HAL_GPIO_WritePin>
	}
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40010c00 	.word	0x40010c00

08000558 <isButton0Pressed>:
int button1_pressed = 0;
int button1_flag = 0;
int button2_pressed = 0;
int button2_flag = 0;

int isButton0Pressed(){
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
	if(button0_flag == 1){
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <isButton0Pressed+0x20>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d104      	bne.n	800056e <isButton0Pressed+0x16>
		button0_flag = 0;
 8000564:	4b04      	ldr	r3, [pc, #16]	@ (8000578 <isButton0Pressed+0x20>)
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
		return 1;
 800056a:	2301      	movs	r3, #1
 800056c:	e000      	b.n	8000570 <isButton0Pressed+0x18>
	}
	return 0;
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	20000064 	.word	0x20000064

0800057c <isButton1Pressed>:
int isButton1Pressed(){
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000580:	4b06      	ldr	r3, [pc, #24]	@ (800059c <isButton1Pressed+0x20>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d104      	bne.n	8000592 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000588:	4b04      	ldr	r3, [pc, #16]	@ (800059c <isButton1Pressed+0x20>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
		return 1;
 800058e:	2301      	movs	r3, #1
 8000590:	e000      	b.n	8000594 <isButton1Pressed+0x18>
	}
	return 0;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	20000068 	.word	0x20000068

080005a0 <isButton2Pressed>:
int isButton2Pressed(){
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <isButton2Pressed+0x20>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d104      	bne.n	80005b6 <isButton2Pressed+0x16>
		button2_flag = 0;
 80005ac:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <isButton2Pressed+0x20>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
		return 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e000      	b.n	80005b8 <isButton2Pressed+0x18>
	}
	return 0;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	2000006c 	.word	0x2000006c

080005c4 <getKeyInput>:
}



void getKeyInput()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	KeyReg20 = KeyReg10;
 80005c8:	4b69      	ldr	r3, [pc, #420]	@ (8000770 <getKeyInput+0x1ac>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a69      	ldr	r2, [pc, #420]	@ (8000774 <getKeyInput+0x1b0>)
 80005ce:	6013      	str	r3, [r2, #0]
	KeyReg10 = KeyReg00;
 80005d0:	4b69      	ldr	r3, [pc, #420]	@ (8000778 <getKeyInput+0x1b4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a66      	ldr	r2, [pc, #408]	@ (8000770 <getKeyInput+0x1ac>)
 80005d6:	6013      	str	r3, [r2, #0]
	// Add your key
	KeyReg00 = HAL_GPIO_ReadPin(btn1_GPIO_Port, btn1_Pin);
 80005d8:	2102      	movs	r1, #2
 80005da:	4868      	ldr	r0, [pc, #416]	@ (800077c <getKeyInput+0x1b8>)
 80005dc:	f001 fe68 	bl	80022b0 <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b64      	ldr	r3, [pc, #400]	@ (8000778 <getKeyInput+0x1b4>)
 80005e6:	601a      	str	r2, [r3, #0]

	if ((KeyReg10 == KeyReg00) && (KeyReg10 == KeyReg20))
 80005e8:	4b61      	ldr	r3, [pc, #388]	@ (8000770 <getKeyInput+0x1ac>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b62      	ldr	r3, [pc, #392]	@ (8000778 <getKeyInput+0x1b4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d12f      	bne.n	8000654 <getKeyInput+0x90>
 80005f4:	4b5e      	ldr	r3, [pc, #376]	@ (8000770 <getKeyInput+0x1ac>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b5e      	ldr	r3, [pc, #376]	@ (8000774 <getKeyInput+0x1b0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d129      	bne.n	8000654 <getKeyInput+0x90>
	{
		if (KeyReg20 != KeyReg30)
 8000600:	4b5c      	ldr	r3, [pc, #368]	@ (8000774 <getKeyInput+0x1b0>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b5e      	ldr	r3, [pc, #376]	@ (8000780 <getKeyInput+0x1bc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	429a      	cmp	r2, r3
 800060a:	d00f      	beq.n	800062c <getKeyInput+0x68>
		{
			KeyReg30 = KeyReg20;
 800060c:	4b59      	ldr	r3, [pc, #356]	@ (8000774 <getKeyInput+0x1b0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a5b      	ldr	r2, [pc, #364]	@ (8000780 <getKeyInput+0x1bc>)
 8000612:	6013      	str	r3, [r2, #0]
			if (KeyReg30 == PRESSED_STATE)
 8000614:	4b5a      	ldr	r3, [pc, #360]	@ (8000780 <getKeyInput+0x1bc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d11b      	bne.n	8000654 <getKeyInput+0x90>
			{
					TimeOutForKeyPress = 500;
 800061c:	4b59      	ldr	r3, [pc, #356]	@ (8000784 <getKeyInput+0x1c0>)
 800061e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000622:	601a      	str	r2, [r3, #0]
					//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
					button0_flag = 1;
 8000624:	4b58      	ldr	r3, [pc, #352]	@ (8000788 <getKeyInput+0x1c4>)
 8000626:	2201      	movs	r2, #1
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	e013      	b.n	8000654 <getKeyInput+0x90>
			}

		}
		else
		{
			TimeOutForKeyPress --;
 800062c:	4b55      	ldr	r3, [pc, #340]	@ (8000784 <getKeyInput+0x1c0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3b01      	subs	r3, #1
 8000632:	4a54      	ldr	r2, [pc, #336]	@ (8000784 <getKeyInput+0x1c0>)
 8000634:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0)
 8000636:	4b53      	ldr	r3, [pc, #332]	@ (8000784 <getKeyInput+0x1c0>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d10a      	bne.n	8000654 <getKeyInput+0x90>
			{
				TimeOutForKeyPress = 500;
 800063e:	4b51      	ldr	r3, [pc, #324]	@ (8000784 <getKeyInput+0x1c0>)
 8000640:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000644:	601a      	str	r2, [r3, #0]
				if (KeyReg30 == PRESSED_STATE)
 8000646:	4b4e      	ldr	r3, [pc, #312]	@ (8000780 <getKeyInput+0x1bc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d102      	bne.n	8000654 <getKeyInput+0x90>
				{
					//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
					button0_flag = 1;
 800064e:	4b4e      	ldr	r3, [pc, #312]	@ (8000788 <getKeyInput+0x1c4>)
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
	KeyReg21 = KeyReg11;
 8000654:	4b4d      	ldr	r3, [pc, #308]	@ (800078c <getKeyInput+0x1c8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a4d      	ldr	r2, [pc, #308]	@ (8000790 <getKeyInput+0x1cc>)
 800065a:	6013      	str	r3, [r2, #0]
    KeyReg11 = KeyReg01;
 800065c:	4b4d      	ldr	r3, [pc, #308]	@ (8000794 <getKeyInput+0x1d0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a4a      	ldr	r2, [pc, #296]	@ (800078c <getKeyInput+0x1c8>)
 8000662:	6013      	str	r3, [r2, #0]
    // Add your key
    KeyReg01 = HAL_GPIO_ReadPin(btn2_GPIO_Port, btn2_Pin);
 8000664:	2104      	movs	r1, #4
 8000666:	4845      	ldr	r0, [pc, #276]	@ (800077c <getKeyInput+0x1b8>)
 8000668:	f001 fe22 	bl	80022b0 <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	4b48      	ldr	r3, [pc, #288]	@ (8000794 <getKeyInput+0x1d0>)
 8000672:	601a      	str	r2, [r3, #0]

    if ((KeyReg11 == KeyReg01) && (KeyReg11 == KeyReg21))
 8000674:	4b45      	ldr	r3, [pc, #276]	@ (800078c <getKeyInput+0x1c8>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b46      	ldr	r3, [pc, #280]	@ (8000794 <getKeyInput+0x1d0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	d12f      	bne.n	80006e0 <getKeyInput+0x11c>
 8000680:	4b42      	ldr	r3, [pc, #264]	@ (800078c <getKeyInput+0x1c8>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b42      	ldr	r3, [pc, #264]	@ (8000790 <getKeyInput+0x1cc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	429a      	cmp	r2, r3
 800068a:	d129      	bne.n	80006e0 <getKeyInput+0x11c>
    {
    	if (KeyReg21 != KeyReg31)
 800068c:	4b40      	ldr	r3, [pc, #256]	@ (8000790 <getKeyInput+0x1cc>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b41      	ldr	r3, [pc, #260]	@ (8000798 <getKeyInput+0x1d4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d00f      	beq.n	80006b8 <getKeyInput+0xf4>
    	{
    		KeyReg31 = KeyReg21;
 8000698:	4b3d      	ldr	r3, [pc, #244]	@ (8000790 <getKeyInput+0x1cc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a3e      	ldr	r2, [pc, #248]	@ (8000798 <getKeyInput+0x1d4>)
 800069e:	6013      	str	r3, [r2, #0]
    		if (KeyReg31 == PRESSED_STATE)
 80006a0:	4b3d      	ldr	r3, [pc, #244]	@ (8000798 <getKeyInput+0x1d4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d11b      	bne.n	80006e0 <getKeyInput+0x11c>
    		{
    			TimeOutForKeyPress = 500;
 80006a8:	4b36      	ldr	r3, [pc, #216]	@ (8000784 <getKeyInput+0x1c0>)
 80006aa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006ae:	601a      	str	r2, [r3, #0]
    			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
    			button1_flag = 1;
 80006b0:	4b3a      	ldr	r3, [pc, #232]	@ (800079c <getKeyInput+0x1d8>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	e013      	b.n	80006e0 <getKeyInput+0x11c>
    		}
    	}
    	else
    	{
    		TimeOutForKeyPress --;
 80006b8:	4b32      	ldr	r3, [pc, #200]	@ (8000784 <getKeyInput+0x1c0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3b01      	subs	r3, #1
 80006be:	4a31      	ldr	r2, [pc, #196]	@ (8000784 <getKeyInput+0x1c0>)
 80006c0:	6013      	str	r3, [r2, #0]
    		if (TimeOutForKeyPress == 0)
 80006c2:	4b30      	ldr	r3, [pc, #192]	@ (8000784 <getKeyInput+0x1c0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d10a      	bne.n	80006e0 <getKeyInput+0x11c>
    		{
    			TimeOutForKeyPress = 500;
 80006ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <getKeyInput+0x1c0>)
 80006cc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006d0:	601a      	str	r2, [r3, #0]
    			if (KeyReg31 == PRESSED_STATE)
 80006d2:	4b31      	ldr	r3, [pc, #196]	@ (8000798 <getKeyInput+0x1d4>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <getKeyInput+0x11c>
    			{
    				//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
    				button1_flag = 1;
 80006da:	4b30      	ldr	r3, [pc, #192]	@ (800079c <getKeyInput+0x1d8>)
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]
    			}
    		}
    	}
    }
    KeyReg22 = KeyReg12;
 80006e0:	4b2f      	ldr	r3, [pc, #188]	@ (80007a0 <getKeyInput+0x1dc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a2f      	ldr	r2, [pc, #188]	@ (80007a4 <getKeyInput+0x1e0>)
 80006e6:	6013      	str	r3, [r2, #0]
    KeyReg12 = KeyReg02;
 80006e8:	4b2f      	ldr	r3, [pc, #188]	@ (80007a8 <getKeyInput+0x1e4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a2c      	ldr	r2, [pc, #176]	@ (80007a0 <getKeyInput+0x1dc>)
 80006ee:	6013      	str	r3, [r2, #0]
      // Add your key
    KeyReg02 = HAL_GPIO_ReadPin(btn3_GPIO_Port, btn3_Pin);
 80006f0:	2108      	movs	r1, #8
 80006f2:	4822      	ldr	r0, [pc, #136]	@ (800077c <getKeyInput+0x1b8>)
 80006f4:	f001 fddc 	bl	80022b0 <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <getKeyInput+0x1e4>)
 80006fe:	601a      	str	r2, [r3, #0]

    if ((KeyReg12 == KeyReg02) && (KeyReg12 == KeyReg22))
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <getKeyInput+0x1dc>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b28      	ldr	r3, [pc, #160]	@ (80007a8 <getKeyInput+0x1e4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	429a      	cmp	r2, r3
 800070a:	d12f      	bne.n	800076c <getKeyInput+0x1a8>
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <getKeyInput+0x1dc>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <getKeyInput+0x1e0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d129      	bne.n	800076c <getKeyInput+0x1a8>
    {
    	if (KeyReg22 != KeyReg32)
 8000718:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <getKeyInput+0x1e0>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b23      	ldr	r3, [pc, #140]	@ (80007ac <getKeyInput+0x1e8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	d00f      	beq.n	8000744 <getKeyInput+0x180>
    	{
    		KeyReg32 = KeyReg22;
 8000724:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <getKeyInput+0x1e0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a20      	ldr	r2, [pc, #128]	@ (80007ac <getKeyInput+0x1e8>)
 800072a:	6013      	str	r3, [r2, #0]
    		if (KeyReg32 == PRESSED_STATE)
 800072c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <getKeyInput+0x1e8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d11b      	bne.n	800076c <getKeyInput+0x1a8>
    		{
    			TimeOutForKeyPress = 500;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <getKeyInput+0x1c0>)
 8000736:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800073a:	601a      	str	r2, [r3, #0]
    			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
    			button2_flag = 1;
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <getKeyInput+0x1ec>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]
            		button2_flag = 1;
            	}
            }
    	}
    }
}
 8000742:	e013      	b.n	800076c <getKeyInput+0x1a8>
    		TimeOutForKeyPress --;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <getKeyInput+0x1c0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3b01      	subs	r3, #1
 800074a:	4a0e      	ldr	r2, [pc, #56]	@ (8000784 <getKeyInput+0x1c0>)
 800074c:	6013      	str	r3, [r2, #0]
            if (TimeOutForKeyPress == 0)
 800074e:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <getKeyInput+0x1c0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d10a      	bne.n	800076c <getKeyInput+0x1a8>
            	TimeOutForKeyPress = 500;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <getKeyInput+0x1c0>)
 8000758:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800075c:	601a      	str	r2, [r3, #0]
            	if (KeyReg32 == PRESSED_STATE)
 800075e:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <getKeyInput+0x1e8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d102      	bne.n	800076c <getKeyInput+0x1a8>
            		button2_flag = 1;
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <getKeyInput+0x1ec>)
 8000768:	2201      	movs	r2, #1
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000004 	.word	0x20000004
 8000774:	20000008 	.word	0x20000008
 8000778:	20000000 	.word	0x20000000
 800077c:	40010800 	.word	0x40010800
 8000780:	2000000c 	.word	0x2000000c
 8000784:	20000030 	.word	0x20000030
 8000788:	20000064 	.word	0x20000064
 800078c:	20000014 	.word	0x20000014
 8000790:	20000018 	.word	0x20000018
 8000794:	20000010 	.word	0x20000010
 8000798:	2000001c 	.word	0x2000001c
 800079c:	20000068 	.word	0x20000068
 80007a0:	20000024 	.word	0x20000024
 80007a4:	20000028 	.word	0x20000028
 80007a8:	20000020 	.word	0x20000020
 80007ac:	2000002c 	.word	0x2000002c
 80007b0:	2000006c 	.word	0x2000006c

080007b4 <fsm_auto>:
int num_to_display_1 = 0;
int num_to_display_2 = 0;


void fsm_auto()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	if(is_timer_expired(3) && (status == AUTO_GREEN_RED ||
 80007b8:	2003      	movs	r0, #3
 80007ba:	f001 f84f 	bl	800185c <is_timer_expired>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d034      	beq.n	800082e <fsm_auto+0x7a>
 80007c4:	4b8b      	ldr	r3, [pc, #556]	@ (80009f4 <fsm_auto+0x240>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d00f      	beq.n	80007ec <fsm_auto+0x38>
							   status == AUTO_RED_GREEN ||
 80007cc:	4b89      	ldr	r3, [pc, #548]	@ (80009f4 <fsm_auto+0x240>)
 80007ce:	681b      	ldr	r3, [r3, #0]
	if(is_timer_expired(3) && (status == AUTO_GREEN_RED ||
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d00b      	beq.n	80007ec <fsm_auto+0x38>
							   status == AUTO_YELLOW_RED ||
 80007d4:	4b87      	ldr	r3, [pc, #540]	@ (80009f4 <fsm_auto+0x240>)
 80007d6:	681b      	ldr	r3, [r3, #0]
							   status == AUTO_RED_GREEN ||
 80007d8:	2b05      	cmp	r3, #5
 80007da:	d007      	beq.n	80007ec <fsm_auto+0x38>
							   status == AUTO_RED_YELLOW ||
 80007dc:	4b85      	ldr	r3, [pc, #532]	@ (80009f4 <fsm_auto+0x240>)
 80007de:	681b      	ldr	r3, [r3, #0]
							   status == AUTO_YELLOW_RED ||
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d003      	beq.n	80007ec <fsm_auto+0x38>
							   status == AUTO_INIT))
 80007e4:	4b83      	ldr	r3, [pc, #524]	@ (80009f4 <fsm_auto+0x240>)
 80007e6:	681b      	ldr	r3, [r3, #0]
							   status == AUTO_RED_YELLOW ||
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d120      	bne.n	800082e <fsm_auto+0x7a>
	{
		getKeyInput();
 80007ec:	f7ff feea 	bl	80005c4 <getKeyInput>
		if (isButton0Pressed())
 80007f0:	f7ff feb2 	bl	8000558 <isButton0Pressed>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d015      	beq.n	8000826 <fsm_auto+0x72>
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80007fa:	2180      	movs	r1, #128	@ 0x80
 80007fc:	487e      	ldr	r0, [pc, #504]	@ (80009f8 <fsm_auto+0x244>)
 80007fe:	f001 fd86 	bl	800230e <HAL_GPIO_TogglePin>
			clear();
 8000802:	f001 f97d 	bl	8001b00 <clear>
			led_buffer[0] = 0;
 8000806:	4b7d      	ldr	r3, [pc, #500]	@ (80009fc <fsm_auto+0x248>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 0;
 800080c:	4b7b      	ldr	r3, [pc, #492]	@ (80009fc <fsm_auto+0x248>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
			led_buffer[2] = 0;
 8000812:	4b7a      	ldr	r3, [pc, #488]	@ (80009fc <fsm_auto+0x248>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
			led_buffer[3] = 0;
 8000818:	4b78      	ldr	r3, [pc, #480]	@ (80009fc <fsm_auto+0x248>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
			status = MANUAL_INIT;
 800081e:	4b75      	ldr	r3, [pc, #468]	@ (80009f4 <fsm_auto+0x240>)
 8000820:	220a      	movs	r2, #10
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	e003      	b.n	800082e <fsm_auto+0x7a>
		}
		else set_timer(3, 20);
 8000826:	2114      	movs	r1, #20
 8000828:	2003      	movs	r0, #3
 800082a:	f000 ffc9 	bl	80017c0 <set_timer>
	}


	if(is_timer_expired(5)  && (status == AUTO_GREEN_RED ||
 800082e:	2005      	movs	r0, #5
 8000830:	f001 f814 	bl	800185c <is_timer_expired>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d054      	beq.n	80008e4 <fsm_auto+0x130>
 800083a:	4b6e      	ldr	r3, [pc, #440]	@ (80009f4 <fsm_auto+0x240>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b04      	cmp	r3, #4
 8000840:	d00f      	beq.n	8000862 <fsm_auto+0xae>
			   	   	   	   	   status == AUTO_RED_GREEN ||
 8000842:	4b6c      	ldr	r3, [pc, #432]	@ (80009f4 <fsm_auto+0x240>)
 8000844:	681b      	ldr	r3, [r3, #0]
	if(is_timer_expired(5)  && (status == AUTO_GREEN_RED ||
 8000846:	2b02      	cmp	r3, #2
 8000848:	d00b      	beq.n	8000862 <fsm_auto+0xae>
							   status == AUTO_YELLOW_RED ||
 800084a:	4b6a      	ldr	r3, [pc, #424]	@ (80009f4 <fsm_auto+0x240>)
 800084c:	681b      	ldr	r3, [r3, #0]
			   	   	   	   	   status == AUTO_RED_GREEN ||
 800084e:	2b05      	cmp	r3, #5
 8000850:	d007      	beq.n	8000862 <fsm_auto+0xae>
							   status == AUTO_RED_YELLOW ||
 8000852:	4b68      	ldr	r3, [pc, #416]	@ (80009f4 <fsm_auto+0x240>)
 8000854:	681b      	ldr	r3, [r3, #0]
							   status == AUTO_YELLOW_RED ||
 8000856:	2b03      	cmp	r3, #3
 8000858:	d003      	beq.n	8000862 <fsm_auto+0xae>
							   status == AUTO_INIT))
 800085a:	4b66      	ldr	r3, [pc, #408]	@ (80009f4 <fsm_auto+0x240>)
 800085c:	681b      	ldr	r3, [r3, #0]
							   status == AUTO_RED_YELLOW ||
 800085e:	2b01      	cmp	r3, #1
 8000860:	d140      	bne.n	80008e4 <fsm_auto+0x130>
	{
		num_to_display_1--;
 8000862:	4b67      	ldr	r3, [pc, #412]	@ (8000a00 <fsm_auto+0x24c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	3b01      	subs	r3, #1
 8000868:	4a65      	ldr	r2, [pc, #404]	@ (8000a00 <fsm_auto+0x24c>)
 800086a:	6013      	str	r3, [r2, #0]
		num_to_display_2--;
 800086c:	4b65      	ldr	r3, [pc, #404]	@ (8000a04 <fsm_auto+0x250>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3b01      	subs	r3, #1
 8000872:	4a64      	ldr	r2, [pc, #400]	@ (8000a04 <fsm_auto+0x250>)
 8000874:	6013      	str	r3, [r2, #0]
		led_buffer[0] = num_to_display_1/10;
 8000876:	4b62      	ldr	r3, [pc, #392]	@ (8000a00 <fsm_auto+0x24c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a63      	ldr	r2, [pc, #396]	@ (8000a08 <fsm_auto+0x254>)
 800087c:	fb82 1203 	smull	r1, r2, r2, r3
 8000880:	1092      	asrs	r2, r2, #2
 8000882:	17db      	asrs	r3, r3, #31
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	4a5d      	ldr	r2, [pc, #372]	@ (80009fc <fsm_auto+0x248>)
 8000888:	6013      	str	r3, [r2, #0]
		led_buffer[1] = num_to_display_1%10;
 800088a:	4b5d      	ldr	r3, [pc, #372]	@ (8000a00 <fsm_auto+0x24c>)
 800088c:	6819      	ldr	r1, [r3, #0]
 800088e:	4b5e      	ldr	r3, [pc, #376]	@ (8000a08 <fsm_auto+0x254>)
 8000890:	fb83 2301 	smull	r2, r3, r3, r1
 8000894:	109a      	asrs	r2, r3, #2
 8000896:	17cb      	asrs	r3, r1, #31
 8000898:	1ad2      	subs	r2, r2, r3
 800089a:	4613      	mov	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	1aca      	subs	r2, r1, r3
 80008a4:	4b55      	ldr	r3, [pc, #340]	@ (80009fc <fsm_auto+0x248>)
 80008a6:	605a      	str	r2, [r3, #4]
		led_buffer[2] = num_to_display_2/10;
 80008a8:	4b56      	ldr	r3, [pc, #344]	@ (8000a04 <fsm_auto+0x250>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a56      	ldr	r2, [pc, #344]	@ (8000a08 <fsm_auto+0x254>)
 80008ae:	fb82 1203 	smull	r1, r2, r2, r3
 80008b2:	1092      	asrs	r2, r2, #2
 80008b4:	17db      	asrs	r3, r3, #31
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	4a50      	ldr	r2, [pc, #320]	@ (80009fc <fsm_auto+0x248>)
 80008ba:	6093      	str	r3, [r2, #8]
		led_buffer[3] = num_to_display_2%10;
 80008bc:	4b51      	ldr	r3, [pc, #324]	@ (8000a04 <fsm_auto+0x250>)
 80008be:	6819      	ldr	r1, [r3, #0]
 80008c0:	4b51      	ldr	r3, [pc, #324]	@ (8000a08 <fsm_auto+0x254>)
 80008c2:	fb83 2301 	smull	r2, r3, r3, r1
 80008c6:	109a      	asrs	r2, r3, #2
 80008c8:	17cb      	asrs	r3, r1, #31
 80008ca:	1ad2      	subs	r2, r2, r3
 80008cc:	4613      	mov	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	1aca      	subs	r2, r1, r3
 80008d6:	4b49      	ldr	r3, [pc, #292]	@ (80009fc <fsm_auto+0x248>)
 80008d8:	60da      	str	r2, [r3, #12]
		set_timer(5, 1000);
 80008da:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008de:	2005      	movs	r0, #5
 80008e0:	f000 ff6e 	bl	80017c0 <set_timer>
	}
	if(is_timer_expired(4))
 80008e4:	2004      	movs	r0, #4
 80008e6:	f000 ffb9 	bl	800185c <is_timer_expired>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d01c      	beq.n	800092a <fsm_auto+0x176>
	{
		if(k == 4) k = 0;
 80008f0:	4b46      	ldr	r3, [pc, #280]	@ (8000a0c <fsm_auto+0x258>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d102      	bne.n	80008fe <fsm_auto+0x14a>
 80008f8:	4b44      	ldr	r3, [pc, #272]	@ (8000a0c <fsm_auto+0x258>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
		update7SEG(k);
 80008fe:	4b43      	ldr	r3, [pc, #268]	@ (8000a0c <fsm_auto+0x258>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fc22 	bl	800014c <update7SEG>
		display7SEG(led_buffer[k]);
 8000908:	4b40      	ldr	r3, [pc, #256]	@ (8000a0c <fsm_auto+0x258>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a3b      	ldr	r2, [pc, #236]	@ (80009fc <fsm_auto+0x248>)
 800090e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fc9a 	bl	800024c <display7SEG>
		k++;
 8000918:	4b3c      	ldr	r3, [pc, #240]	@ (8000a0c <fsm_auto+0x258>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a0c <fsm_auto+0x258>)
 8000920:	6013      	str	r3, [r2, #0]
		set_timer(4, 150);
 8000922:	2196      	movs	r1, #150	@ 0x96
 8000924:	2004      	movs	r0, #4
 8000926:	f000 ff4b 	bl	80017c0 <set_timer>
	}


	if(is_timer_expired(2))
 800092a:	2002      	movs	r0, #2
 800092c:	f000 ff96 	bl	800185c <is_timer_expired>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d05b      	beq.n	80009ee <fsm_auto+0x23a>
	{
		switch (status)
 8000936:	4b2f      	ldr	r3, [pc, #188]	@ (80009f4 <fsm_auto+0x240>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3b01      	subs	r3, #1
 800093c:	2b04      	cmp	r3, #4
 800093e:	d855      	bhi.n	80009ec <fsm_auto+0x238>
 8000940:	a201      	add	r2, pc, #4	@ (adr r2, 8000948 <fsm_auto+0x194>)
 8000942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000946:	bf00      	nop
 8000948:	0800095d 	.word	0x0800095d
 800094c:	08000965 	.word	0x08000965
 8000950:	08000987 	.word	0x08000987
 8000954:	080009a9 	.word	0x080009a9
 8000958:	080009cb 	.word	0x080009cb
		{
			case AUTO_INIT:
				status = AUTO_RED_GREEN;
 800095c:	4b25      	ldr	r3, [pc, #148]	@ (80009f4 <fsm_auto+0x240>)
 800095e:	2202      	movs	r2, #2
 8000960:	601a      	str	r2, [r3, #0]
//				set_timer(2, 5);
//				set_timer(3, 4);
//				set_timer(4, 3);
//				set_timer(5, 2);
				break;
 8000962:	e044      	b.n	80009ee <fsm_auto+0x23a>
			case AUTO_RED_GREEN:
				led_red_and_green();
 8000964:	f001 f824 	bl	80019b0 <led_red_and_green>
				num_to_display_1 = 5;
 8000968:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <fsm_auto+0x24c>)
 800096a:	2205      	movs	r2, #5
 800096c:	601a      	str	r2, [r3, #0]
				num_to_display_2 = 3;
 800096e:	4b25      	ldr	r3, [pc, #148]	@ (8000a04 <fsm_auto+0x250>)
 8000970:	2203      	movs	r2, #3
 8000972:	601a      	str	r2, [r3, #0]
				status = AUTO_RED_YELLOW;
 8000974:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <fsm_auto+0x240>)
 8000976:	2203      	movs	r2, #3
 8000978:	601a      	str	r2, [r3, #0]
				set_timer(2, 3000);
 800097a:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800097e:	2002      	movs	r0, #2
 8000980:	f000 ff1e 	bl	80017c0 <set_timer>
				break;
 8000984:	e033      	b.n	80009ee <fsm_auto+0x23a>
			case AUTO_RED_YELLOW:
				led_red_and_yellow();
 8000986:	f001 f83d 	bl	8001a04 <led_red_and_yellow>
				num_to_display_1 = 2;
 800098a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <fsm_auto+0x24c>)
 800098c:	2202      	movs	r2, #2
 800098e:	601a      	str	r2, [r3, #0]
				num_to_display_2 = 2;
 8000990:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <fsm_auto+0x250>)
 8000992:	2202      	movs	r2, #2
 8000994:	601a      	str	r2, [r3, #0]
				status = AUTO_GREEN_RED;
 8000996:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <fsm_auto+0x240>)
 8000998:	2204      	movs	r2, #4
 800099a:	601a      	str	r2, [r3, #0]
				set_timer(2, 2000);
 800099c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80009a0:	2002      	movs	r0, #2
 80009a2:	f000 ff0d 	bl	80017c0 <set_timer>
				break;
 80009a6:	e022      	b.n	80009ee <fsm_auto+0x23a>
			case AUTO_GREEN_RED:
				led_green_and_red();
 80009a8:	f001 f856 	bl	8001a58 <led_green_and_red>
				num_to_display_1 = 3;
 80009ac:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <fsm_auto+0x24c>)
 80009ae:	2203      	movs	r2, #3
 80009b0:	601a      	str	r2, [r3, #0]
				num_to_display_2 = 5;
 80009b2:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <fsm_auto+0x250>)
 80009b4:	2205      	movs	r2, #5
 80009b6:	601a      	str	r2, [r3, #0]
				status = AUTO_YELLOW_RED;
 80009b8:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <fsm_auto+0x240>)
 80009ba:	2205      	movs	r2, #5
 80009bc:	601a      	str	r2, [r3, #0]
				set_timer(2, 3000);
 80009be:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80009c2:	2002      	movs	r0, #2
 80009c4:	f000 fefc 	bl	80017c0 <set_timer>
				break;
 80009c8:	e011      	b.n	80009ee <fsm_auto+0x23a>
			case AUTO_YELLOW_RED:
				led_yellow_and_red();
 80009ca:	f001 f86f 	bl	8001aac <led_yellow_and_red>
				num_to_display_1 = 2;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <fsm_auto+0x24c>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	601a      	str	r2, [r3, #0]
				num_to_display_2 = 2;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <fsm_auto+0x250>)
 80009d6:	2202      	movs	r2, #2
 80009d8:	601a      	str	r2, [r3, #0]
				status = AUTO_GREEN_RED;
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <fsm_auto+0x240>)
 80009dc:	2204      	movs	r2, #4
 80009de:	601a      	str	r2, [r3, #0]
				set_timer(2, 2000);
 80009e0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80009e4:	2002      	movs	r0, #2
 80009e6:	f000 feeb 	bl	80017c0 <set_timer>
				break;
 80009ea:	e000      	b.n	80009ee <fsm_auto+0x23a>
			default:
				break;
 80009ec:	bf00      	nop
		}
	}
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000034 	.word	0x20000034
 80009f8:	40010800 	.word	0x40010800
 80009fc:	20000074 	.word	0x20000074
 8000a00:	20000084 	.word	0x20000084
 8000a04:	20000088 	.word	0x20000088
 8000a08:	66666667 	.word	0x66666667
 8000a0c:	20000070 	.word	0x20000070

08000a10 <fsm_manual>:

int num_to_display1 = 0;
int num_to_display2 = 0;

void fsm_manual()
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0


	if(is_timer_expired(9))
 8000a14:	2009      	movs	r0, #9
 8000a16:	f000 ff21 	bl	800185c <is_timer_expired>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	f000 8466 	beq.w	80012ee <fsm_manual+0x8de>
	{
		switch(status)
 8000a22:	4b91      	ldr	r3, [pc, #580]	@ (8000c68 <fsm_manual+0x258>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	3b06      	subs	r3, #6
 8000a28:	2b07      	cmp	r3, #7
 8000a2a:	f200 845f 	bhi.w	80012ec <fsm_manual+0x8dc>
 8000a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a34 <fsm_manual+0x24>)
 8000a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a34:	08000f7f 	.word	0x08000f7f
 8000a38:	0800104b 	.word	0x0800104b
 8000a3c:	0800114d 	.word	0x0800114d
 8000a40:	08001219 	.word	0x08001219
 8000a44:	08000a55 	.word	0x08000a55
 8000a48:	08000ab3 	.word	0x08000ab3
 8000a4c:	08000c8d 	.word	0x08000c8d
 8000a50:	08000e5f 	.word	0x08000e5f
		{
		case MANUAL_INIT:
			toggle();
 8000a54:	f001 f87e 	bl	8001b54 <toggle>
			led_buffer[0] = 0;
 8000a58:	4b84      	ldr	r3, [pc, #528]	@ (8000c6c <fsm_manual+0x25c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
			led_buffer[1] = 0;
 8000a5e:	4b83      	ldr	r3, [pc, #524]	@ (8000c6c <fsm_manual+0x25c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
			led_buffer[2] = 0;
 8000a64:	4b81      	ldr	r3, [pc, #516]	@ (8000c6c <fsm_manual+0x25c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
			led_buffer[3] = 0;
 8000a6a:	4b80      	ldr	r3, [pc, #512]	@ (8000c6c <fsm_manual+0x25c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
			if(isButton0Pressed())
 8000a70:	f7ff fd72 	bl	8000558 <isButton0Pressed>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d005      	beq.n	8000a86 <fsm_manual+0x76>
			{
				clear();
 8000a7a:	f001 f841 	bl	8001b00 <clear>
				status = RED_SET;
 8000a7e:	4b7a      	ldr	r3, [pc, #488]	@ (8000c68 <fsm_manual+0x258>)
 8000a80:	220b      	movs	r2, #11
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	e00e      	b.n	8000aa4 <fsm_manual+0x94>
			}
			else if(isButton2Pressed())
 8000a86:	f7ff fd8b 	bl	80005a0 <isButton2Pressed>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d005      	beq.n	8000a9c <fsm_manual+0x8c>
			{
				clear();
 8000a90:	f001 f836 	bl	8001b00 <clear>
				status = AUTO_INIT;
 8000a94:	4b74      	ldr	r3, [pc, #464]	@ (8000c68 <fsm_manual+0x258>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	e003      	b.n	8000aa4 <fsm_manual+0x94>
			}
			else set_timer(3, 20);
 8000a9c:	2114      	movs	r1, #20
 8000a9e:	2003      	movs	r0, #3
 8000aa0:	f000 fe8e 	bl	80017c0 <set_timer>
			set_timer(9, 500);
 8000aa4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000aa8:	2009      	movs	r0, #9
 8000aaa:	f000 fe89 	bl	80017c0 <set_timer>
			break;
 8000aae:	f000 bc1e 	b.w	80012ee <fsm_manual+0x8de>
		case RED_SET:
			togglered();
 8000ab2:	f001 f873 	bl	8001b9c <togglered>
			if(isButton0Pressed())
 8000ab6:	f7ff fd4f 	bl	8000558 <isButton0Pressed>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d034      	beq.n	8000b2a <fsm_manual+0x11a>
			{
				clear();
 8000ac0:	f001 f81e 	bl	8001b00 <clear>
				if (red_time <= 1) red_time = 2;
 8000ac4:	4b6a      	ldr	r3, [pc, #424]	@ (8000c70 <fsm_manual+0x260>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	dc03      	bgt.n	8000ad4 <fsm_manual+0xc4>
 8000acc:	4b68      	ldr	r3, [pc, #416]	@ (8000c70 <fsm_manual+0x260>)
 8000ace:	2202      	movs	r2, #2
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	e003      	b.n	8000adc <fsm_manual+0xcc>
				else red = red_time;
 8000ad4:	4b66      	ldr	r3, [pc, #408]	@ (8000c70 <fsm_manual+0x260>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a66      	ldr	r2, [pc, #408]	@ (8000c74 <fsm_manual+0x264>)
 8000ada:	6013      	str	r3, [r2, #0]
				status = YELLOW_SET;
 8000adc:	4b62      	ldr	r3, [pc, #392]	@ (8000c68 <fsm_manual+0x258>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
				led_buffer[0] = yellow_time/10;
 8000ae2:	4b65      	ldr	r3, [pc, #404]	@ (8000c78 <fsm_manual+0x268>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a65      	ldr	r2, [pc, #404]	@ (8000c7c <fsm_manual+0x26c>)
 8000ae8:	fb82 1203 	smull	r1, r2, r2, r3
 8000aec:	1092      	asrs	r2, r2, #2
 8000aee:	17db      	asrs	r3, r3, #31
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	4a5e      	ldr	r2, [pc, #376]	@ (8000c6c <fsm_manual+0x25c>)
 8000af4:	6013      	str	r3, [r2, #0]
				led_buffer[1] = yellow_time%10;
 8000af6:	4b60      	ldr	r3, [pc, #384]	@ (8000c78 <fsm_manual+0x268>)
 8000af8:	6819      	ldr	r1, [r3, #0]
 8000afa:	4b60      	ldr	r3, [pc, #384]	@ (8000c7c <fsm_manual+0x26c>)
 8000afc:	fb83 2301 	smull	r2, r3, r3, r1
 8000b00:	109a      	asrs	r2, r3, #2
 8000b02:	17cb      	asrs	r3, r1, #31
 8000b04:	1ad2      	subs	r2, r2, r3
 8000b06:	4613      	mov	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	4413      	add	r3, r2
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	1aca      	subs	r2, r1, r3
 8000b10:	4b56      	ldr	r3, [pc, #344]	@ (8000c6c <fsm_manual+0x25c>)
 8000b12:	605a      	str	r2, [r3, #4]
				led_buffer[2] = 0;
 8000b14:	4b55      	ldr	r3, [pc, #340]	@ (8000c6c <fsm_manual+0x25c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
				led_buffer[3] = 0;
 8000b1a:	4b54      	ldr	r3, [pc, #336]	@ (8000c6c <fsm_manual+0x25c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
				set_timer(3, 20);
 8000b20:	2114      	movs	r1, #20
 8000b22:	2003      	movs	r0, #3
 8000b24:	f000 fe4c 	bl	80017c0 <set_timer>
 8000b28:	e098      	b.n	8000c5c <fsm_manual+0x24c>
			}
			else if(isButton1Pressed())
 8000b2a:	f7ff fd27 	bl	800057c <isButton1Pressed>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d02a      	beq.n	8000b8a <fsm_manual+0x17a>
			{
				clear();
 8000b34:	f000 ffe4 	bl	8001b00 <clear>
				red_time++;
 8000b38:	4b4d      	ldr	r3, [pc, #308]	@ (8000c70 <fsm_manual+0x260>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	4a4c      	ldr	r2, [pc, #304]	@ (8000c70 <fsm_manual+0x260>)
 8000b40:	6013      	str	r3, [r2, #0]
				led_buffer[0] = red_time/10;
 8000b42:	4b4b      	ldr	r3, [pc, #300]	@ (8000c70 <fsm_manual+0x260>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a4d      	ldr	r2, [pc, #308]	@ (8000c7c <fsm_manual+0x26c>)
 8000b48:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4c:	1092      	asrs	r2, r2, #2
 8000b4e:	17db      	asrs	r3, r3, #31
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	4a46      	ldr	r2, [pc, #280]	@ (8000c6c <fsm_manual+0x25c>)
 8000b54:	6013      	str	r3, [r2, #0]
				led_buffer[1] = red_time%10;
 8000b56:	4b46      	ldr	r3, [pc, #280]	@ (8000c70 <fsm_manual+0x260>)
 8000b58:	6819      	ldr	r1, [r3, #0]
 8000b5a:	4b48      	ldr	r3, [pc, #288]	@ (8000c7c <fsm_manual+0x26c>)
 8000b5c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b60:	109a      	asrs	r2, r3, #2
 8000b62:	17cb      	asrs	r3, r1, #31
 8000b64:	1ad2      	subs	r2, r2, r3
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	1aca      	subs	r2, r1, r3
 8000b70:	4b3e      	ldr	r3, [pc, #248]	@ (8000c6c <fsm_manual+0x25c>)
 8000b72:	605a      	str	r2, [r3, #4]
				led_buffer[2] = 0;
 8000b74:	4b3d      	ldr	r3, [pc, #244]	@ (8000c6c <fsm_manual+0x25c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
				led_buffer[3] = 0;
 8000b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000c6c <fsm_manual+0x25c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
				set_timer(3, 20);
 8000b80:	2114      	movs	r1, #20
 8000b82:	2003      	movs	r0, #3
 8000b84:	f000 fe1c 	bl	80017c0 <set_timer>
 8000b88:	e068      	b.n	8000c5c <fsm_manual+0x24c>
			}
			else if(isButton2Pressed())
 8000b8a:	f7ff fd09 	bl	80005a0 <isButton2Pressed>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d05f      	beq.n	8000c54 <fsm_manual+0x244>
			{
				clear();
 8000b94:	f000 ffb4 	bl	8001b00 <clear>
				if(red_time <= 1)
 8000b98:	4b35      	ldr	r3, [pc, #212]	@ (8000c70 <fsm_manual+0x260>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	dc1c      	bgt.n	8000bda <fsm_manual+0x1ca>
				{
					red_time = 2;
 8000ba0:	4b33      	ldr	r3, [pc, #204]	@ (8000c70 <fsm_manual+0x260>)
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	601a      	str	r2, [r3, #0]
					yellow_time = 1;
 8000ba6:	4b34      	ldr	r3, [pc, #208]	@ (8000c78 <fsm_manual+0x268>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	601a      	str	r2, [r3, #0]
					green_time = red_time - yellow_time;
 8000bac:	4b30      	ldr	r3, [pc, #192]	@ (8000c70 <fsm_manual+0x260>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b31      	ldr	r3, [pc, #196]	@ (8000c78 <fsm_manual+0x268>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	4a32      	ldr	r2, [pc, #200]	@ (8000c80 <fsm_manual+0x270>)
 8000bb8:	6013      	str	r3, [r2, #0]

					red = red_time;
 8000bba:	4b2d      	ldr	r3, [pc, #180]	@ (8000c70 <fsm_manual+0x260>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a2d      	ldr	r2, [pc, #180]	@ (8000c74 <fsm_manual+0x264>)
 8000bc0:	6013      	str	r3, [r2, #0]
					yellow = yellow_time;
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c78 <fsm_manual+0x268>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a2f      	ldr	r2, [pc, #188]	@ (8000c84 <fsm_manual+0x274>)
 8000bc8:	6013      	str	r3, [r2, #0]
					green = green_time;
 8000bca:	4b2d      	ldr	r3, [pc, #180]	@ (8000c80 <fsm_manual+0x270>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a2e      	ldr	r2, [pc, #184]	@ (8000c88 <fsm_manual+0x278>)
 8000bd0:	6013      	str	r3, [r2, #0]

					status = MAN_RED_GREEN;
 8000bd2:	4b25      	ldr	r3, [pc, #148]	@ (8000c68 <fsm_manual+0x258>)
 8000bd4:	2206      	movs	r2, #6
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	e037      	b.n	8000c4a <fsm_manual+0x23a>
				}
				else
				{
					yellow_time = 1;
 8000bda:	4b27      	ldr	r3, [pc, #156]	@ (8000c78 <fsm_manual+0x268>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	601a      	str	r2, [r3, #0]
					green_time = red_time - yellow_time;
 8000be0:	4b23      	ldr	r3, [pc, #140]	@ (8000c70 <fsm_manual+0x260>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b24      	ldr	r3, [pc, #144]	@ (8000c78 <fsm_manual+0x268>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	4a25      	ldr	r2, [pc, #148]	@ (8000c80 <fsm_manual+0x270>)
 8000bec:	6013      	str	r3, [r2, #0]
					red = red_time;
 8000bee:	4b20      	ldr	r3, [pc, #128]	@ (8000c70 <fsm_manual+0x260>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a20      	ldr	r2, [pc, #128]	@ (8000c74 <fsm_manual+0x264>)
 8000bf4:	6013      	str	r3, [r2, #0]
					yellow = yellow_time;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <fsm_manual+0x268>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a22      	ldr	r2, [pc, #136]	@ (8000c84 <fsm_manual+0x274>)
 8000bfc:	6013      	str	r3, [r2, #0]
					green = green_time;
 8000bfe:	4b20      	ldr	r3, [pc, #128]	@ (8000c80 <fsm_manual+0x270>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a21      	ldr	r2, [pc, #132]	@ (8000c88 <fsm_manual+0x278>)
 8000c04:	6013      	str	r3, [r2, #0]
					led_buffer[0] = red_time/10;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <fsm_manual+0x260>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c7c <fsm_manual+0x26c>)
 8000c0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c10:	1092      	asrs	r2, r2, #2
 8000c12:	17db      	asrs	r3, r3, #31
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	4a15      	ldr	r2, [pc, #84]	@ (8000c6c <fsm_manual+0x25c>)
 8000c18:	6013      	str	r3, [r2, #0]
					led_buffer[1] = red_time%10;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <fsm_manual+0x260>)
 8000c1c:	6819      	ldr	r1, [r3, #0]
 8000c1e:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <fsm_manual+0x26c>)
 8000c20:	fb83 2301 	smull	r2, r3, r3, r1
 8000c24:	109a      	asrs	r2, r3, #2
 8000c26:	17cb      	asrs	r3, r1, #31
 8000c28:	1ad2      	subs	r2, r2, r3
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	1aca      	subs	r2, r1, r3
 8000c34:	4b0d      	ldr	r3, [pc, #52]	@ (8000c6c <fsm_manual+0x25c>)
 8000c36:	605a      	str	r2, [r3, #4]
					led_buffer[2] = 0;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <fsm_manual+0x25c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
					led_buffer[3] = 0;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <fsm_manual+0x25c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
					status = MAN_RED_GREEN;
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <fsm_manual+0x258>)
 8000c46:	2206      	movs	r2, #6
 8000c48:	601a      	str	r2, [r3, #0]
				}
				set_timer(3, 20);
 8000c4a:	2114      	movs	r1, #20
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 fdb7 	bl	80017c0 <set_timer>
 8000c52:	e003      	b.n	8000c5c <fsm_manual+0x24c>
			}
			else set_timer(3, 20);
 8000c54:	2114      	movs	r1, #20
 8000c56:	2003      	movs	r0, #3
 8000c58:	f000 fdb2 	bl	80017c0 <set_timer>
			set_timer(9, 500);
 8000c5c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000c60:	2009      	movs	r0, #9
 8000c62:	f000 fdad 	bl	80017c0 <set_timer>
			break;
 8000c66:	e342      	b.n	80012ee <fsm_manual+0x8de>
 8000c68:	20000034 	.word	0x20000034
 8000c6c:	20000074 	.word	0x20000074
 8000c70:	2000008c 	.word	0x2000008c
 8000c74:	20000098 	.word	0x20000098
 8000c78:	20000090 	.word	0x20000090
 8000c7c:	66666667 	.word	0x66666667
 8000c80:	20000094 	.word	0x20000094
 8000c84:	2000009c 	.word	0x2000009c
 8000c88:	200000a0 	.word	0x200000a0
		case YELLOW_SET:
			toggleyellow();
 8000c8c:	f000 ffae 	bl	8001bec <toggleyellow>
			if(isButton0Pressed())
 8000c90:	f7ff fc62 	bl	8000558 <isButton0Pressed>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d02f      	beq.n	8000cfa <fsm_manual+0x2ea>
			{
				clear();
 8000c9a:	f000 ff31 	bl	8001b00 <clear>
				if (yellow_time <= 1) yellow_time = 1;
 8000c9e:	4b9b      	ldr	r3, [pc, #620]	@ (8000f0c <fsm_manual+0x4fc>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	dc02      	bgt.n	8000cac <fsm_manual+0x29c>
 8000ca6:	4b99      	ldr	r3, [pc, #612]	@ (8000f0c <fsm_manual+0x4fc>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
				status = GREEN_SET;
 8000cac:	4b98      	ldr	r3, [pc, #608]	@ (8000f10 <fsm_manual+0x500>)
 8000cae:	220d      	movs	r2, #13
 8000cb0:	601a      	str	r2, [r3, #0]
				led_buffer[0] = green_time/10;
 8000cb2:	4b98      	ldr	r3, [pc, #608]	@ (8000f14 <fsm_manual+0x504>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a98      	ldr	r2, [pc, #608]	@ (8000f18 <fsm_manual+0x508>)
 8000cb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cbc:	1092      	asrs	r2, r2, #2
 8000cbe:	17db      	asrs	r3, r3, #31
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	4a96      	ldr	r2, [pc, #600]	@ (8000f1c <fsm_manual+0x50c>)
 8000cc4:	6013      	str	r3, [r2, #0]
				led_buffer[1] = green_time%10;
 8000cc6:	4b93      	ldr	r3, [pc, #588]	@ (8000f14 <fsm_manual+0x504>)
 8000cc8:	6819      	ldr	r1, [r3, #0]
 8000cca:	4b93      	ldr	r3, [pc, #588]	@ (8000f18 <fsm_manual+0x508>)
 8000ccc:	fb83 2301 	smull	r2, r3, r3, r1
 8000cd0:	109a      	asrs	r2, r3, #2
 8000cd2:	17cb      	asrs	r3, r1, #31
 8000cd4:	1ad2      	subs	r2, r2, r3
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	1aca      	subs	r2, r1, r3
 8000ce0:	4b8e      	ldr	r3, [pc, #568]	@ (8000f1c <fsm_manual+0x50c>)
 8000ce2:	605a      	str	r2, [r3, #4]
				led_buffer[2] = 0;
 8000ce4:	4b8d      	ldr	r3, [pc, #564]	@ (8000f1c <fsm_manual+0x50c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
				led_buffer[3] = 0;
 8000cea:	4b8c      	ldr	r3, [pc, #560]	@ (8000f1c <fsm_manual+0x50c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
				set_timer(3, 20);
 8000cf0:	2114      	movs	r1, #20
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f000 fd64 	bl	80017c0 <set_timer>
 8000cf8:	e0ab      	b.n	8000e52 <fsm_manual+0x442>
			}
			else if(isButton1Pressed())
 8000cfa:	f7ff fc3f 	bl	800057c <isButton1Pressed>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d028      	beq.n	8000d56 <fsm_manual+0x346>
			{
				yellow_time++;
 8000d04:	4b81      	ldr	r3, [pc, #516]	@ (8000f0c <fsm_manual+0x4fc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4a80      	ldr	r2, [pc, #512]	@ (8000f0c <fsm_manual+0x4fc>)
 8000d0c:	6013      	str	r3, [r2, #0]
				led_buffer[0] = yellow_time/10;
 8000d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8000f0c <fsm_manual+0x4fc>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a81      	ldr	r2, [pc, #516]	@ (8000f18 <fsm_manual+0x508>)
 8000d14:	fb82 1203 	smull	r1, r2, r2, r3
 8000d18:	1092      	asrs	r2, r2, #2
 8000d1a:	17db      	asrs	r3, r3, #31
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	4a7f      	ldr	r2, [pc, #508]	@ (8000f1c <fsm_manual+0x50c>)
 8000d20:	6013      	str	r3, [r2, #0]
				led_buffer[1] = yellow_time%10;
 8000d22:	4b7a      	ldr	r3, [pc, #488]	@ (8000f0c <fsm_manual+0x4fc>)
 8000d24:	6819      	ldr	r1, [r3, #0]
 8000d26:	4b7c      	ldr	r3, [pc, #496]	@ (8000f18 <fsm_manual+0x508>)
 8000d28:	fb83 2301 	smull	r2, r3, r3, r1
 8000d2c:	109a      	asrs	r2, r3, #2
 8000d2e:	17cb      	asrs	r3, r1, #31
 8000d30:	1ad2      	subs	r2, r2, r3
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	1aca      	subs	r2, r1, r3
 8000d3c:	4b77      	ldr	r3, [pc, #476]	@ (8000f1c <fsm_manual+0x50c>)
 8000d3e:	605a      	str	r2, [r3, #4]
				led_buffer[2] = 0;
 8000d40:	4b76      	ldr	r3, [pc, #472]	@ (8000f1c <fsm_manual+0x50c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
				led_buffer[3] = 0;
 8000d46:	4b75      	ldr	r3, [pc, #468]	@ (8000f1c <fsm_manual+0x50c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
				set_timer(3, 20);
 8000d4c:	2114      	movs	r1, #20
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f000 fd36 	bl	80017c0 <set_timer>
 8000d54:	e07d      	b.n	8000e52 <fsm_manual+0x442>
			}
			else if(isButton2Pressed())
 8000d56:	f7ff fc23 	bl	80005a0 <isButton2Pressed>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d074      	beq.n	8000e4a <fsm_manual+0x43a>
			{
				clear();
 8000d60:	f000 fece 	bl	8001b00 <clear>
				if(yellow_time < 1)
 8000d64:	4b69      	ldr	r3, [pc, #420]	@ (8000f0c <fsm_manual+0x4fc>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	dc38      	bgt.n	8000dde <fsm_manual+0x3ce>
				{
					yellow_time = 1;
 8000d6c:	4b67      	ldr	r3, [pc, #412]	@ (8000f0c <fsm_manual+0x4fc>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
					green_time = red_time - yellow_time;
 8000d72:	4b6b      	ldr	r3, [pc, #428]	@ (8000f20 <fsm_manual+0x510>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4b65      	ldr	r3, [pc, #404]	@ (8000f0c <fsm_manual+0x4fc>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	4a65      	ldr	r2, [pc, #404]	@ (8000f14 <fsm_manual+0x504>)
 8000d7e:	6013      	str	r3, [r2, #0]
					red = red_time;
 8000d80:	4b67      	ldr	r3, [pc, #412]	@ (8000f20 <fsm_manual+0x510>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a67      	ldr	r2, [pc, #412]	@ (8000f24 <fsm_manual+0x514>)
 8000d86:	6013      	str	r3, [r2, #0]
					yellow = yellow_time;
 8000d88:	4b60      	ldr	r3, [pc, #384]	@ (8000f0c <fsm_manual+0x4fc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a66      	ldr	r2, [pc, #408]	@ (8000f28 <fsm_manual+0x518>)
 8000d8e:	6013      	str	r3, [r2, #0]
					green = green_time;
 8000d90:	4b60      	ldr	r3, [pc, #384]	@ (8000f14 <fsm_manual+0x504>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a65      	ldr	r2, [pc, #404]	@ (8000f2c <fsm_manual+0x51c>)
 8000d96:	6013      	str	r3, [r2, #0]
					led_buffer[0] = yellow_time/10;
 8000d98:	4b5c      	ldr	r3, [pc, #368]	@ (8000f0c <fsm_manual+0x4fc>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a5e      	ldr	r2, [pc, #376]	@ (8000f18 <fsm_manual+0x508>)
 8000d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000da2:	1092      	asrs	r2, r2, #2
 8000da4:	17db      	asrs	r3, r3, #31
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	4a5c      	ldr	r2, [pc, #368]	@ (8000f1c <fsm_manual+0x50c>)
 8000daa:	6013      	str	r3, [r2, #0]
					led_buffer[1] = yellow_time%10;
 8000dac:	4b57      	ldr	r3, [pc, #348]	@ (8000f0c <fsm_manual+0x4fc>)
 8000dae:	6819      	ldr	r1, [r3, #0]
 8000db0:	4b59      	ldr	r3, [pc, #356]	@ (8000f18 <fsm_manual+0x508>)
 8000db2:	fb83 2301 	smull	r2, r3, r3, r1
 8000db6:	109a      	asrs	r2, r3, #2
 8000db8:	17cb      	asrs	r3, r1, #31
 8000dba:	1ad2      	subs	r2, r2, r3
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	1aca      	subs	r2, r1, r3
 8000dc6:	4b55      	ldr	r3, [pc, #340]	@ (8000f1c <fsm_manual+0x50c>)
 8000dc8:	605a      	str	r2, [r3, #4]
					led_buffer[2] = 0;
 8000dca:	4b54      	ldr	r3, [pc, #336]	@ (8000f1c <fsm_manual+0x50c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
					led_buffer[3] = 0;
 8000dd0:	4b52      	ldr	r3, [pc, #328]	@ (8000f1c <fsm_manual+0x50c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
					status = MAN_RED_GREEN;
 8000dd6:	4b4e      	ldr	r3, [pc, #312]	@ (8000f10 <fsm_manual+0x500>)
 8000dd8:	2206      	movs	r2, #6
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	e030      	b.n	8000e40 <fsm_manual+0x430>
				}
				else if (yellow_time >= red_time)
 8000dde:	4b4b      	ldr	r3, [pc, #300]	@ (8000f0c <fsm_manual+0x4fc>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4b4f      	ldr	r3, [pc, #316]	@ (8000f20 <fsm_manual+0x510>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	db18      	blt.n	8000e1c <fsm_manual+0x40c>
				{
					red_time = 0;
 8000dea:	4b4d      	ldr	r3, [pc, #308]	@ (8000f20 <fsm_manual+0x510>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
					yellow_time = 0;
 8000df0:	4b46      	ldr	r3, [pc, #280]	@ (8000f0c <fsm_manual+0x4fc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
					green_time = 0;
 8000df6:	4b47      	ldr	r3, [pc, #284]	@ (8000f14 <fsm_manual+0x504>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
					led_buffer[0] = 0;
 8000dfc:	4b47      	ldr	r3, [pc, #284]	@ (8000f1c <fsm_manual+0x50c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
					led_buffer[1] = 0;
 8000e02:	4b46      	ldr	r3, [pc, #280]	@ (8000f1c <fsm_manual+0x50c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
					led_buffer[2] = 0;
 8000e08:	4b44      	ldr	r3, [pc, #272]	@ (8000f1c <fsm_manual+0x50c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
					led_buffer[3] = 0;
 8000e0e:	4b43      	ldr	r3, [pc, #268]	@ (8000f1c <fsm_manual+0x50c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
					status = RED_SET;
 8000e14:	4b3e      	ldr	r3, [pc, #248]	@ (8000f10 <fsm_manual+0x500>)
 8000e16:	220b      	movs	r2, #11
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e011      	b.n	8000e40 <fsm_manual+0x430>
				}
				else{
					yellow = yellow_time;
 8000e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f0c <fsm_manual+0x4fc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a41      	ldr	r2, [pc, #260]	@ (8000f28 <fsm_manual+0x518>)
 8000e22:	6013      	str	r3, [r2, #0]
					green = green_time = red_time - yellow_time;
 8000e24:	4b3e      	ldr	r3, [pc, #248]	@ (8000f20 <fsm_manual+0x510>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b38      	ldr	r3, [pc, #224]	@ (8000f0c <fsm_manual+0x4fc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	4a39      	ldr	r2, [pc, #228]	@ (8000f14 <fsm_manual+0x504>)
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	4b38      	ldr	r3, [pc, #224]	@ (8000f14 <fsm_manual+0x504>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a3d      	ldr	r2, [pc, #244]	@ (8000f2c <fsm_manual+0x51c>)
 8000e38:	6013      	str	r3, [r2, #0]
					status = MAN_RED_GREEN;
 8000e3a:	4b35      	ldr	r3, [pc, #212]	@ (8000f10 <fsm_manual+0x500>)
 8000e3c:	2206      	movs	r2, #6
 8000e3e:	601a      	str	r2, [r3, #0]
				}
				set_timer(3, 20);
 8000e40:	2114      	movs	r1, #20
 8000e42:	2003      	movs	r0, #3
 8000e44:	f000 fcbc 	bl	80017c0 <set_timer>
 8000e48:	e003      	b.n	8000e52 <fsm_manual+0x442>
			}
			else set_timer(3, 20);
 8000e4a:	2114      	movs	r1, #20
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 fcb7 	bl	80017c0 <set_timer>
			set_timer(9, 500);
 8000e52:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000e56:	2009      	movs	r0, #9
 8000e58:	f000 fcb2 	bl	80017c0 <set_timer>
			break;
 8000e5c:	e247      	b.n	80012ee <fsm_manual+0x8de>
		case GREEN_SET:
			togglegreen();
 8000e5e:	f000 feed 	bl	8001c3c <togglegreen>
			if(isButton0Pressed())
 8000e62:	f7ff fb79 	bl	8000558 <isButton0Pressed>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d009      	beq.n	8000e80 <fsm_manual+0x470>
			{
				clear();
 8000e6c:	f000 fe48 	bl	8001b00 <clear>
				status = RED_SET;
 8000e70:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <fsm_manual+0x500>)
 8000e72:	220b      	movs	r2, #11
 8000e74:	601a      	str	r2, [r3, #0]
				set_timer(3, 20);
 8000e76:	2114      	movs	r1, #20
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fca1 	bl	80017c0 <set_timer>
 8000e7e:	e078      	b.n	8000f72 <fsm_manual+0x562>
			}
			else if(isButton1Pressed())
 8000e80:	f7ff fb7c 	bl	800057c <isButton1Pressed>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d028      	beq.n	8000edc <fsm_manual+0x4cc>
			{
				green_time++;
 8000e8a:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <fsm_manual+0x504>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a20      	ldr	r2, [pc, #128]	@ (8000f14 <fsm_manual+0x504>)
 8000e92:	6013      	str	r3, [r2, #0]
				led_buffer[0] = green_time/10;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <fsm_manual+0x504>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1f      	ldr	r2, [pc, #124]	@ (8000f18 <fsm_manual+0x508>)
 8000e9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e9e:	1092      	asrs	r2, r2, #2
 8000ea0:	17db      	asrs	r3, r3, #31
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f1c <fsm_manual+0x50c>)
 8000ea6:	6013      	str	r3, [r2, #0]
				led_buffer[1] = green_time%10;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <fsm_manual+0x504>)
 8000eaa:	6819      	ldr	r1, [r3, #0]
 8000eac:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <fsm_manual+0x508>)
 8000eae:	fb83 2301 	smull	r2, r3, r3, r1
 8000eb2:	109a      	asrs	r2, r3, #2
 8000eb4:	17cb      	asrs	r3, r1, #31
 8000eb6:	1ad2      	subs	r2, r2, r3
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	1aca      	subs	r2, r1, r3
 8000ec2:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <fsm_manual+0x50c>)
 8000ec4:	605a      	str	r2, [r3, #4]
				led_buffer[2] = 0;
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <fsm_manual+0x50c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
				led_buffer[3] = 0;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <fsm_manual+0x50c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
				set_timer(3, 20);
 8000ed2:	2114      	movs	r1, #20
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 fc73 	bl	80017c0 <set_timer>
 8000eda:	e04a      	b.n	8000f72 <fsm_manual+0x562>
			}
			else if(isButton2Pressed())
 8000edc:	f7ff fb60 	bl	80005a0 <isButton2Pressed>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d041      	beq.n	8000f6a <fsm_manual+0x55a>
			{
				if(green_time == (red_time - yellow_time) && (yellow_time != 0))
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <fsm_manual+0x510>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <fsm_manual+0x4fc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	1ad2      	subs	r2, r2, r3
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <fsm_manual+0x504>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d11b      	bne.n	8000f30 <fsm_manual+0x520>
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <fsm_manual+0x4fc>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d017      	beq.n	8000f30 <fsm_manual+0x520>
				{
					clear();
 8000f00:	f000 fdfe 	bl	8001b00 <clear>
					status = MAN_RED_GREEN;
 8000f04:	4b02      	ldr	r3, [pc, #8]	@ (8000f10 <fsm_manual+0x500>)
 8000f06:	2206      	movs	r2, #6
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e029      	b.n	8000f60 <fsm_manual+0x550>
 8000f0c:	20000090 	.word	0x20000090
 8000f10:	20000034 	.word	0x20000034
 8000f14:	20000094 	.word	0x20000094
 8000f18:	66666667 	.word	0x66666667
 8000f1c:	20000074 	.word	0x20000074
 8000f20:	2000008c 	.word	0x2000008c
 8000f24:	20000098 	.word	0x20000098
 8000f28:	2000009c 	.word	0x2000009c
 8000f2c:	200000a0 	.word	0x200000a0
				}
				else {
					status = RED_SET;
 8000f30:	4b7d      	ldr	r3, [pc, #500]	@ (8001128 <fsm_manual+0x718>)
 8000f32:	220b      	movs	r2, #11
 8000f34:	601a      	str	r2, [r3, #0]
					red_time = 0;
 8000f36:	4b7d      	ldr	r3, [pc, #500]	@ (800112c <fsm_manual+0x71c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
					yellow_time = 0;
 8000f3c:	4b7c      	ldr	r3, [pc, #496]	@ (8001130 <fsm_manual+0x720>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
					green_time = 0;
 8000f42:	4b7c      	ldr	r3, [pc, #496]	@ (8001134 <fsm_manual+0x724>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
					led_buffer[0] = 0;
 8000f48:	4b7b      	ldr	r3, [pc, #492]	@ (8001138 <fsm_manual+0x728>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
					led_buffer[1] = 0;
 8000f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8001138 <fsm_manual+0x728>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
					led_buffer[2] = 0;
 8000f54:	4b78      	ldr	r3, [pc, #480]	@ (8001138 <fsm_manual+0x728>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
					led_buffer[3] = 0;
 8000f5a:	4b77      	ldr	r3, [pc, #476]	@ (8001138 <fsm_manual+0x728>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
				}
				set_timer(3, 20);
 8000f60:	2114      	movs	r1, #20
 8000f62:	2003      	movs	r0, #3
 8000f64:	f000 fc2c 	bl	80017c0 <set_timer>
 8000f68:	e003      	b.n	8000f72 <fsm_manual+0x562>
			}
			else set_timer(3, 20);
 8000f6a:	2114      	movs	r1, #20
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 fc27 	bl	80017c0 <set_timer>
			set_timer(9, 500);
 8000f72:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000f76:	2009      	movs	r0, #9
 8000f78:	f000 fc22 	bl	80017c0 <set_timer>
			break;
 8000f7c:	e1b7      	b.n	80012ee <fsm_manual+0x8de>
		case MAN_RED_GREEN:

			led_red_and_green();
 8000f7e:	f000 fd17 	bl	80019b0 <led_red_and_green>
			led_buffer[0] = red/10;
 8000f82:	4b6e      	ldr	r3, [pc, #440]	@ (800113c <fsm_manual+0x72c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a6e      	ldr	r2, [pc, #440]	@ (8001140 <fsm_manual+0x730>)
 8000f88:	fb82 1203 	smull	r1, r2, r2, r3
 8000f8c:	1092      	asrs	r2, r2, #2
 8000f8e:	17db      	asrs	r3, r3, #31
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	4a69      	ldr	r2, [pc, #420]	@ (8001138 <fsm_manual+0x728>)
 8000f94:	6013      	str	r3, [r2, #0]
			led_buffer[1] = red%10;
 8000f96:	4b69      	ldr	r3, [pc, #420]	@ (800113c <fsm_manual+0x72c>)
 8000f98:	6819      	ldr	r1, [r3, #0]
 8000f9a:	4b69      	ldr	r3, [pc, #420]	@ (8001140 <fsm_manual+0x730>)
 8000f9c:	fb83 2301 	smull	r2, r3, r3, r1
 8000fa0:	109a      	asrs	r2, r3, #2
 8000fa2:	17cb      	asrs	r3, r1, #31
 8000fa4:	1ad2      	subs	r2, r2, r3
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	1aca      	subs	r2, r1, r3
 8000fb0:	4b61      	ldr	r3, [pc, #388]	@ (8001138 <fsm_manual+0x728>)
 8000fb2:	605a      	str	r2, [r3, #4]
			led_buffer[2] = green/10;
 8000fb4:	4b63      	ldr	r3, [pc, #396]	@ (8001144 <fsm_manual+0x734>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a61      	ldr	r2, [pc, #388]	@ (8001140 <fsm_manual+0x730>)
 8000fba:	fb82 1203 	smull	r1, r2, r2, r3
 8000fbe:	1092      	asrs	r2, r2, #2
 8000fc0:	17db      	asrs	r3, r3, #31
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	4a5c      	ldr	r2, [pc, #368]	@ (8001138 <fsm_manual+0x728>)
 8000fc6:	6093      	str	r3, [r2, #8]
			led_buffer[3] = green%10;
 8000fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8001144 <fsm_manual+0x734>)
 8000fca:	6819      	ldr	r1, [r3, #0]
 8000fcc:	4b5c      	ldr	r3, [pc, #368]	@ (8001140 <fsm_manual+0x730>)
 8000fce:	fb83 2301 	smull	r2, r3, r3, r1
 8000fd2:	109a      	asrs	r2, r3, #2
 8000fd4:	17cb      	asrs	r3, r1, #31
 8000fd6:	1ad2      	subs	r2, r2, r3
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	1aca      	subs	r2, r1, r3
 8000fe2:	4b55      	ldr	r3, [pc, #340]	@ (8001138 <fsm_manual+0x728>)
 8000fe4:	60da      	str	r2, [r3, #12]
			red--;
 8000fe6:	4b55      	ldr	r3, [pc, #340]	@ (800113c <fsm_manual+0x72c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	4a53      	ldr	r2, [pc, #332]	@ (800113c <fsm_manual+0x72c>)
 8000fee:	6013      	str	r3, [r2, #0]
			green--;
 8000ff0:	4b54      	ldr	r3, [pc, #336]	@ (8001144 <fsm_manual+0x734>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	4a53      	ldr	r2, [pc, #332]	@ (8001144 <fsm_manual+0x734>)
 8000ff8:	6013      	str	r3, [r2, #0]
			if(green == 0)
 8000ffa:	4b52      	ldr	r3, [pc, #328]	@ (8001144 <fsm_manual+0x734>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <fsm_manual+0x600>
			{
				green = green_time;
 8001002:	4b4c      	ldr	r3, [pc, #304]	@ (8001134 <fsm_manual+0x724>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a4f      	ldr	r2, [pc, #316]	@ (8001144 <fsm_manual+0x734>)
 8001008:	6013      	str	r3, [r2, #0]
				status = MAN_RED_YELLOW;
 800100a:	4b47      	ldr	r3, [pc, #284]	@ (8001128 <fsm_manual+0x718>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
			}
			if(isButton2Pressed())
 8001010:	f7ff fac6 	bl	80005a0 <isButton2Pressed>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d011      	beq.n	800103e <fsm_manual+0x62e>
			{
				clear();
 800101a:	f000 fd71 	bl	8001b00 <clear>
				red_time = 0; yellow_time = 0; green_time = 0;
 800101e:	4b43      	ldr	r3, [pc, #268]	@ (800112c <fsm_manual+0x71c>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	4b42      	ldr	r3, [pc, #264]	@ (8001130 <fsm_manual+0x720>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	4b42      	ldr	r3, [pc, #264]	@ (8001134 <fsm_manual+0x724>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
				status = MANUAL_INIT;
 8001030:	4b3d      	ldr	r3, [pc, #244]	@ (8001128 <fsm_manual+0x718>)
 8001032:	220a      	movs	r2, #10
 8001034:	601a      	str	r2, [r3, #0]
				set_timer(3, 20);
 8001036:	2114      	movs	r1, #20
 8001038:	2003      	movs	r0, #3
 800103a:	f000 fbc1 	bl	80017c0 <set_timer>
			}
			set_timer(9, 1000);
 800103e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001042:	2009      	movs	r0, #9
 8001044:	f000 fbbc 	bl	80017c0 <set_timer>
			break;
 8001048:	e151      	b.n	80012ee <fsm_manual+0x8de>
		case MAN_RED_YELLOW:

			led_red_and_yellow();
 800104a:	f000 fcdb 	bl	8001a04 <led_red_and_yellow>
			led_buffer[0] = red/10;
 800104e:	4b3b      	ldr	r3, [pc, #236]	@ (800113c <fsm_manual+0x72c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a3b      	ldr	r2, [pc, #236]	@ (8001140 <fsm_manual+0x730>)
 8001054:	fb82 1203 	smull	r1, r2, r2, r3
 8001058:	1092      	asrs	r2, r2, #2
 800105a:	17db      	asrs	r3, r3, #31
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	4a36      	ldr	r2, [pc, #216]	@ (8001138 <fsm_manual+0x728>)
 8001060:	6013      	str	r3, [r2, #0]
			led_buffer[1] = red%10;
 8001062:	4b36      	ldr	r3, [pc, #216]	@ (800113c <fsm_manual+0x72c>)
 8001064:	6819      	ldr	r1, [r3, #0]
 8001066:	4b36      	ldr	r3, [pc, #216]	@ (8001140 <fsm_manual+0x730>)
 8001068:	fb83 2301 	smull	r2, r3, r3, r1
 800106c:	109a      	asrs	r2, r3, #2
 800106e:	17cb      	asrs	r3, r1, #31
 8001070:	1ad2      	subs	r2, r2, r3
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	1aca      	subs	r2, r1, r3
 800107c:	4b2e      	ldr	r3, [pc, #184]	@ (8001138 <fsm_manual+0x728>)
 800107e:	605a      	str	r2, [r3, #4]
			led_buffer[2] = yellow/10;
 8001080:	4b31      	ldr	r3, [pc, #196]	@ (8001148 <fsm_manual+0x738>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a2e      	ldr	r2, [pc, #184]	@ (8001140 <fsm_manual+0x730>)
 8001086:	fb82 1203 	smull	r1, r2, r2, r3
 800108a:	1092      	asrs	r2, r2, #2
 800108c:	17db      	asrs	r3, r3, #31
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	4a29      	ldr	r2, [pc, #164]	@ (8001138 <fsm_manual+0x728>)
 8001092:	6093      	str	r3, [r2, #8]
			led_buffer[3] = yellow%10;
 8001094:	4b2c      	ldr	r3, [pc, #176]	@ (8001148 <fsm_manual+0x738>)
 8001096:	6819      	ldr	r1, [r3, #0]
 8001098:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <fsm_manual+0x730>)
 800109a:	fb83 2301 	smull	r2, r3, r3, r1
 800109e:	109a      	asrs	r2, r3, #2
 80010a0:	17cb      	asrs	r3, r1, #31
 80010a2:	1ad2      	subs	r2, r2, r3
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	1aca      	subs	r2, r1, r3
 80010ae:	4b22      	ldr	r3, [pc, #136]	@ (8001138 <fsm_manual+0x728>)
 80010b0:	60da      	str	r2, [r3, #12]
			red--;
 80010b2:	4b22      	ldr	r3, [pc, #136]	@ (800113c <fsm_manual+0x72c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	4a20      	ldr	r2, [pc, #128]	@ (800113c <fsm_manual+0x72c>)
 80010ba:	6013      	str	r3, [r2, #0]
			yellow--;
 80010bc:	4b22      	ldr	r3, [pc, #136]	@ (8001148 <fsm_manual+0x738>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	4a21      	ldr	r2, [pc, #132]	@ (8001148 <fsm_manual+0x738>)
 80010c4:	6013      	str	r3, [r2, #0]
			if(red == 0)red = red_time;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <fsm_manual+0x72c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d103      	bne.n	80010d6 <fsm_manual+0x6c6>
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <fsm_manual+0x71c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a1a      	ldr	r2, [pc, #104]	@ (800113c <fsm_manual+0x72c>)
 80010d4:	6013      	str	r3, [r2, #0]
			if(yellow == 0)
 80010d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001148 <fsm_manual+0x738>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d106      	bne.n	80010ec <fsm_manual+0x6dc>
			{
				yellow = yellow_time;
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <fsm_manual+0x720>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a19      	ldr	r2, [pc, #100]	@ (8001148 <fsm_manual+0x738>)
 80010e4:	6013      	str	r3, [r2, #0]
				status = MAN_GREEN_RED;
 80010e6:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <fsm_manual+0x718>)
 80010e8:	2208      	movs	r2, #8
 80010ea:	601a      	str	r2, [r3, #0]
			}
			if(isButton2Pressed())
 80010ec:	f7ff fa58 	bl	80005a0 <isButton2Pressed>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d011      	beq.n	800111a <fsm_manual+0x70a>
			{
				clear();
 80010f6:	f000 fd03 	bl	8001b00 <clear>
				red_time = 0; yellow_time = 0; green_time = 0;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <fsm_manual+0x71c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <fsm_manual+0x720>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <fsm_manual+0x724>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
				status = MANUAL_INIT;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <fsm_manual+0x718>)
 800110e:	220a      	movs	r2, #10
 8001110:	601a      	str	r2, [r3, #0]
				set_timer(3, 20);
 8001112:	2114      	movs	r1, #20
 8001114:	2003      	movs	r0, #3
 8001116:	f000 fb53 	bl	80017c0 <set_timer>
			}
			set_timer(9, 1000);
 800111a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800111e:	2009      	movs	r0, #9
 8001120:	f000 fb4e 	bl	80017c0 <set_timer>
			break;
 8001124:	e0e3      	b.n	80012ee <fsm_manual+0x8de>
 8001126:	bf00      	nop
 8001128:	20000034 	.word	0x20000034
 800112c:	2000008c 	.word	0x2000008c
 8001130:	20000090 	.word	0x20000090
 8001134:	20000094 	.word	0x20000094
 8001138:	20000074 	.word	0x20000074
 800113c:	20000098 	.word	0x20000098
 8001140:	66666667 	.word	0x66666667
 8001144:	200000a0 	.word	0x200000a0
 8001148:	2000009c 	.word	0x2000009c
		case MAN_GREEN_RED:

			led_green_and_red();
 800114c:	f000 fc84 	bl	8001a58 <led_green_and_red>
			led_buffer[0] = green/10;
 8001150:	4b68      	ldr	r3, [pc, #416]	@ (80012f4 <fsm_manual+0x8e4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a68      	ldr	r2, [pc, #416]	@ (80012f8 <fsm_manual+0x8e8>)
 8001156:	fb82 1203 	smull	r1, r2, r2, r3
 800115a:	1092      	asrs	r2, r2, #2
 800115c:	17db      	asrs	r3, r3, #31
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	4a66      	ldr	r2, [pc, #408]	@ (80012fc <fsm_manual+0x8ec>)
 8001162:	6013      	str	r3, [r2, #0]
			led_buffer[1] = green%10;
 8001164:	4b63      	ldr	r3, [pc, #396]	@ (80012f4 <fsm_manual+0x8e4>)
 8001166:	6819      	ldr	r1, [r3, #0]
 8001168:	4b63      	ldr	r3, [pc, #396]	@ (80012f8 <fsm_manual+0x8e8>)
 800116a:	fb83 2301 	smull	r2, r3, r3, r1
 800116e:	109a      	asrs	r2, r3, #2
 8001170:	17cb      	asrs	r3, r1, #31
 8001172:	1ad2      	subs	r2, r2, r3
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	1aca      	subs	r2, r1, r3
 800117e:	4b5f      	ldr	r3, [pc, #380]	@ (80012fc <fsm_manual+0x8ec>)
 8001180:	605a      	str	r2, [r3, #4]
			led_buffer[2] = red/10;
 8001182:	4b5f      	ldr	r3, [pc, #380]	@ (8001300 <fsm_manual+0x8f0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a5c      	ldr	r2, [pc, #368]	@ (80012f8 <fsm_manual+0x8e8>)
 8001188:	fb82 1203 	smull	r1, r2, r2, r3
 800118c:	1092      	asrs	r2, r2, #2
 800118e:	17db      	asrs	r3, r3, #31
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	4a5a      	ldr	r2, [pc, #360]	@ (80012fc <fsm_manual+0x8ec>)
 8001194:	6093      	str	r3, [r2, #8]
			led_buffer[3] = red%10;
 8001196:	4b5a      	ldr	r3, [pc, #360]	@ (8001300 <fsm_manual+0x8f0>)
 8001198:	6819      	ldr	r1, [r3, #0]
 800119a:	4b57      	ldr	r3, [pc, #348]	@ (80012f8 <fsm_manual+0x8e8>)
 800119c:	fb83 2301 	smull	r2, r3, r3, r1
 80011a0:	109a      	asrs	r2, r3, #2
 80011a2:	17cb      	asrs	r3, r1, #31
 80011a4:	1ad2      	subs	r2, r2, r3
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	1aca      	subs	r2, r1, r3
 80011b0:	4b52      	ldr	r3, [pc, #328]	@ (80012fc <fsm_manual+0x8ec>)
 80011b2:	60da      	str	r2, [r3, #12]
			red--;
 80011b4:	4b52      	ldr	r3, [pc, #328]	@ (8001300 <fsm_manual+0x8f0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	4a51      	ldr	r2, [pc, #324]	@ (8001300 <fsm_manual+0x8f0>)
 80011bc:	6013      	str	r3, [r2, #0]
			green--;
 80011be:	4b4d      	ldr	r3, [pc, #308]	@ (80012f4 <fsm_manual+0x8e4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	4a4b      	ldr	r2, [pc, #300]	@ (80012f4 <fsm_manual+0x8e4>)
 80011c6:	6013      	str	r3, [r2, #0]
			if(green == 0)
 80011c8:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <fsm_manual+0x8e4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d106      	bne.n	80011de <fsm_manual+0x7ce>
			{
				green = green_time;
 80011d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001304 <fsm_manual+0x8f4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a47      	ldr	r2, [pc, #284]	@ (80012f4 <fsm_manual+0x8e4>)
 80011d6:	6013      	str	r3, [r2, #0]
				status = MAN_YELLOW_RED;
 80011d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001308 <fsm_manual+0x8f8>)
 80011da:	2209      	movs	r2, #9
 80011dc:	601a      	str	r2, [r3, #0]
			}
			if(isButton2Pressed())
 80011de:	f7ff f9df 	bl	80005a0 <isButton2Pressed>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d011      	beq.n	800120c <fsm_manual+0x7fc>
			{
				clear();
 80011e8:	f000 fc8a 	bl	8001b00 <clear>
				red_time = 0; yellow_time = 0; green_time = 0;
 80011ec:	4b47      	ldr	r3, [pc, #284]	@ (800130c <fsm_manual+0x8fc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	4b47      	ldr	r3, [pc, #284]	@ (8001310 <fsm_manual+0x900>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	4b42      	ldr	r3, [pc, #264]	@ (8001304 <fsm_manual+0x8f4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
				status = MANUAL_INIT;
 80011fe:	4b42      	ldr	r3, [pc, #264]	@ (8001308 <fsm_manual+0x8f8>)
 8001200:	220a      	movs	r2, #10
 8001202:	601a      	str	r2, [r3, #0]
				set_timer(3, 20);
 8001204:	2114      	movs	r1, #20
 8001206:	2003      	movs	r0, #3
 8001208:	f000 fada 	bl	80017c0 <set_timer>
			}
			set_timer(9, 1000);
 800120c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001210:	2009      	movs	r0, #9
 8001212:	f000 fad5 	bl	80017c0 <set_timer>
			break;
 8001216:	e06a      	b.n	80012ee <fsm_manual+0x8de>
		case MAN_YELLOW_RED:

			led_yellow_and_red();
 8001218:	f000 fc48 	bl	8001aac <led_yellow_and_red>
			led_buffer[0] = yellow/10;
 800121c:	4b3d      	ldr	r3, [pc, #244]	@ (8001314 <fsm_manual+0x904>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a35      	ldr	r2, [pc, #212]	@ (80012f8 <fsm_manual+0x8e8>)
 8001222:	fb82 1203 	smull	r1, r2, r2, r3
 8001226:	1092      	asrs	r2, r2, #2
 8001228:	17db      	asrs	r3, r3, #31
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	4a33      	ldr	r2, [pc, #204]	@ (80012fc <fsm_manual+0x8ec>)
 800122e:	6013      	str	r3, [r2, #0]
			led_buffer[1] = yellow%10;
 8001230:	4b38      	ldr	r3, [pc, #224]	@ (8001314 <fsm_manual+0x904>)
 8001232:	6819      	ldr	r1, [r3, #0]
 8001234:	4b30      	ldr	r3, [pc, #192]	@ (80012f8 <fsm_manual+0x8e8>)
 8001236:	fb83 2301 	smull	r2, r3, r3, r1
 800123a:	109a      	asrs	r2, r3, #2
 800123c:	17cb      	asrs	r3, r1, #31
 800123e:	1ad2      	subs	r2, r2, r3
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	1aca      	subs	r2, r1, r3
 800124a:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <fsm_manual+0x8ec>)
 800124c:	605a      	str	r2, [r3, #4]
			led_buffer[2] = red/10;
 800124e:	4b2c      	ldr	r3, [pc, #176]	@ (8001300 <fsm_manual+0x8f0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a29      	ldr	r2, [pc, #164]	@ (80012f8 <fsm_manual+0x8e8>)
 8001254:	fb82 1203 	smull	r1, r2, r2, r3
 8001258:	1092      	asrs	r2, r2, #2
 800125a:	17db      	asrs	r3, r3, #31
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	4a27      	ldr	r2, [pc, #156]	@ (80012fc <fsm_manual+0x8ec>)
 8001260:	6093      	str	r3, [r2, #8]
			led_buffer[3] = red%10;
 8001262:	4b27      	ldr	r3, [pc, #156]	@ (8001300 <fsm_manual+0x8f0>)
 8001264:	6819      	ldr	r1, [r3, #0]
 8001266:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <fsm_manual+0x8e8>)
 8001268:	fb83 2301 	smull	r2, r3, r3, r1
 800126c:	109a      	asrs	r2, r3, #2
 800126e:	17cb      	asrs	r3, r1, #31
 8001270:	1ad2      	subs	r2, r2, r3
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	1aca      	subs	r2, r1, r3
 800127c:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <fsm_manual+0x8ec>)
 800127e:	60da      	str	r2, [r3, #12]
			yellow--;
 8001280:	4b24      	ldr	r3, [pc, #144]	@ (8001314 <fsm_manual+0x904>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3b01      	subs	r3, #1
 8001286:	4a23      	ldr	r2, [pc, #140]	@ (8001314 <fsm_manual+0x904>)
 8001288:	6013      	str	r3, [r2, #0]
			red--;
 800128a:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <fsm_manual+0x8f0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	3b01      	subs	r3, #1
 8001290:	4a1b      	ldr	r2, [pc, #108]	@ (8001300 <fsm_manual+0x8f0>)
 8001292:	6013      	str	r3, [r2, #0]
			if(yellow == 0)
 8001294:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <fsm_manual+0x904>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10a      	bne.n	80012b2 <fsm_manual+0x8a2>
			{
				red = red_time;
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <fsm_manual+0x8fc>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <fsm_manual+0x8f0>)
 80012a2:	6013      	str	r3, [r2, #0]
				yellow = yellow_time;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <fsm_manual+0x900>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001314 <fsm_manual+0x904>)
 80012aa:	6013      	str	r3, [r2, #0]
				status = MAN_RED_GREEN;
 80012ac:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <fsm_manual+0x8f8>)
 80012ae:	2206      	movs	r2, #6
 80012b0:	601a      	str	r2, [r3, #0]
			}
			if(isButton2Pressed())
 80012b2:	f7ff f975 	bl	80005a0 <isButton2Pressed>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d011      	beq.n	80012e0 <fsm_manual+0x8d0>
			{
				clear();
 80012bc:	f000 fc20 	bl	8001b00 <clear>
				red_time = 0; yellow_time = 0; green_time = 0;
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <fsm_manual+0x8fc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <fsm_manual+0x900>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <fsm_manual+0x8f4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
				status = MANUAL_INIT;
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <fsm_manual+0x8f8>)
 80012d4:	220a      	movs	r2, #10
 80012d6:	601a      	str	r2, [r3, #0]
				set_timer(3, 20);
 80012d8:	2114      	movs	r1, #20
 80012da:	2003      	movs	r0, #3
 80012dc:	f000 fa70 	bl	80017c0 <set_timer>
			}
			set_timer(9, 1000);
 80012e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012e4:	2009      	movs	r0, #9
 80012e6:	f000 fa6b 	bl	80017c0 <set_timer>
			break;
 80012ea:	e000      	b.n	80012ee <fsm_manual+0x8de>
//			led_buffer[3] = 0;
//			status = MANUAL_INIT;
//			set_timer(9, 1);
//			break;
		default:
			break;
 80012ec:	bf00      	nop
			}
	}

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200000a0 	.word	0x200000a0
 80012f8:	66666667 	.word	0x66666667
 80012fc:	20000074 	.word	0x20000074
 8001300:	20000098 	.word	0x20000098
 8001304:	20000094 	.word	0x20000094
 8001308:	20000034 	.word	0x20000034
 800130c:	2000008c 	.word	0x2000008c
 8001310:	20000090 	.word	0x20000090
 8001314:	2000009c 	.word	0x2000009c

08001318 <fsm_setting>:
 *  Created on: Nov 2, 2024
 *      Author: QUÝ
 */
#include "fsm_setting.h"

void fsm_setting(){}
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <SCH_Add_Task>:
#include "global.h"
sTask SCH_tasks_G[SCH_MAX_TASKS];
int status = AUTO_INIT;

unsigned char SCH_Add_Task(void (*pFunction)(), unsigned int DELAY, unsigned int PERIOD)
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
	uint32_t Index = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
	// First find a gap in the array (if there is one)
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8001334:	e002      	b.n	800133c <SCH_Add_Task+0x18>
	{
		Index++;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 800133c:	4a18      	ldr	r2, [pc, #96]	@ (80013a0 <SCH_Add_Task+0x7c>)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	4413      	add	r3, r2
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <SCH_Add_Task+0x2c>
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b27      	cmp	r3, #39	@ 0x27
 800134e:	d9f2      	bls.n	8001336 <SCH_Add_Task+0x12>
	}
	if (Index == SCH_MAX_TASKS) {
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b28      	cmp	r3, #40	@ 0x28
 8001354:	d101      	bne.n	800135a <SCH_Add_Task+0x36>
		return 1; // Also return an error code
 8001356:	2301      	movs	r3, #1
 8001358:	e01c      	b.n	8001394 <SCH_Add_Task+0x70>
	}
	// If we're here, there is a space in the task array
	SCH_tasks_G[Index].pTask = pFunction;
 800135a:	4a11      	ldr	r2, [pc, #68]	@ (80013a0 <SCH_Add_Task+0x7c>)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	4413      	add	r3, r2
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 8001366:	4a0e      	ldr	r2, [pc, #56]	@ (80013a0 <SCH_Add_Task+0x7c>)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	3304      	adds	r3, #4
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 8001374:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <SCH_Add_Task+0x7c>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	4413      	add	r3, r2
 800137c:	3308      	adds	r3, #8
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 8001382:	4a07      	ldr	r2, [pc, #28]	@ (80013a0 <SCH_Add_Task+0x7c>)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	330c      	adds	r3, #12
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
	return Index; // return position of task (to allow later deletion)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	b2db      	uxtb	r3, r3
}
 8001394:	4618      	mov	r0, r3
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	200000a4 	.word	0x200000a4

080013a4 <SCH_Update>:

void SCH_Update(uint32_t Index)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	if (SCH_tasks_G[Index].pTask) {
 80013ac:	4a22      	ldr	r2, [pc, #136]	@ (8001438 <SCH_Update+0x94>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d038      	beq.n	800142c <SCH_Update+0x88>
		if (SCH_tasks_G[Index].Delay == 0) {
 80013ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001438 <SCH_Update+0x94>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	4413      	add	r3, r2
 80013c2:	3304      	adds	r3, #4
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d123      	bne.n	8001412 <SCH_Update+0x6e>
			// The task is due to run
			SCH_tasks_G[Index].RunMe += 1; // Inc. the 'RunMe' flag
 80013ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001438 <SCH_Update+0x94>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	4413      	add	r3, r2
 80013d2:	330c      	adds	r3, #12
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	b2d9      	uxtb	r1, r3
 80013da:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <SCH_Update+0x94>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	4413      	add	r3, r2
 80013e2:	330c      	adds	r3, #12
 80013e4:	460a      	mov	r2, r1
 80013e6:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[Index].Period) {
 80013e8:	4a13      	ldr	r2, [pc, #76]	@ (8001438 <SCH_Update+0x94>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	4413      	add	r3, r2
 80013f0:	3308      	adds	r3, #8
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d019      	beq.n	800142c <SCH_Update+0x88>
				// Schedule periodic tasks to run again
				SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 80013f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <SCH_Update+0x94>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	4413      	add	r3, r2
 8001400:	3308      	adds	r3, #8
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	490c      	ldr	r1, [pc, #48]	@ (8001438 <SCH_Update+0x94>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	440b      	add	r3, r1
 800140c:	3304      	adds	r3, #4
 800140e:	601a      	str	r2, [r3, #0]
		{
			// Not yet ready to run: just decrement the delay
			SCH_tasks_G[Index].Delay -= 1;
		}
	}
}
 8001410:	e00c      	b.n	800142c <SCH_Update+0x88>
			SCH_tasks_G[Index].Delay -= 1;
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <SCH_Update+0x94>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	3304      	adds	r3, #4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	4905      	ldr	r1, [pc, #20]	@ (8001438 <SCH_Update+0x94>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	440b      	add	r3, r1
 8001428:	3304      	adds	r3, #4
 800142a:	601a      	str	r2, [r3, #0]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	200000a4 	.word	0x200000a4

0800143c <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(uint32_t TASK_INDEX)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	int Return_code;
	if (SCH_tasks_G[TASK_INDEX].pTask == 0) Return_code = 1;
 8001444:	4a16      	ldr	r2, [pc, #88]	@ (80014a0 <SCH_Delete_Task+0x64>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4413      	add	r3, r2
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <SCH_Delete_Task+0x1c>
 8001452:	2301      	movs	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e001      	b.n	800145c <SCH_Delete_Task+0x20>
	else Return_code = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 800145c:	4a10      	ldr	r2, [pc, #64]	@ (80014a0 <SCH_Delete_Task+0x64>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 8001468:	4a0d      	ldr	r2, [pc, #52]	@ (80014a0 <SCH_Delete_Task+0x64>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	3304      	adds	r3, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 8001476:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <SCH_Delete_Task+0x64>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	3308      	adds	r3, #8
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8001484:	4a06      	ldr	r2, [pc, #24]	@ (80014a0 <SCH_Delete_Task+0x64>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	4413      	add	r3, r2
 800148c:	330c      	adds	r3, #12
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
	return Return_code; // return status
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	b2db      	uxtb	r3, r3
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	200000a4 	.word	0x200000a4

080014a4 <SCH_Dispatch_Tasks>:


void SCH_Dispatch_Tasks(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
	uint32_t Index;
	// Dispatches (runs) the next task (if one is ready)
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	e01f      	b.n	80014f0 <SCH_Dispatch_Tasks+0x4c>
		if (SCH_tasks_G[Index].RunMe > 0) {
 80014b0:	4a13      	ldr	r2, [pc, #76]	@ (8001500 <SCH_Dispatch_Tasks+0x5c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	4413      	add	r3, r2
 80014b8:	330c      	adds	r3, #12
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d014      	beq.n	80014ea <SCH_Dispatch_Tasks+0x46>
			(*SCH_tasks_G[Index].pTask)(); // Run the task
 80014c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001500 <SCH_Dispatch_Tasks+0x5c>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4413      	add	r3, r2
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe--; // Reset / reduce RunMe flag
 80014cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001500 <SCH_Dispatch_Tasks+0x5c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	4413      	add	r3, r2
 80014d4:	330c      	adds	r3, #12
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	b2d9      	uxtb	r1, r3
 80014dc:	4a08      	ldr	r2, [pc, #32]	@ (8001500 <SCH_Dispatch_Tasks+0x5c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	4413      	add	r3, r2
 80014e4:	330c      	adds	r3, #12
 80014e6:	460a      	mov	r2, r1
 80014e8:	701a      	strb	r2, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3301      	adds	r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b27      	cmp	r3, #39	@ 0x27
 80014f4:	d9dc      	bls.n	80014b0 <SCH_Dispatch_Tasks+0xc>
		}
	}
}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200000a4 	.word	0x200000a4

08001504 <SCH_Init>:

void SCH_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
	unsigned char i;
	for(i = 0; i < SCH_MAX_TASKS; i++)
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]
 800150e:	e006      	b.n	800151e <SCH_Init+0x1a>
	{
		SCH_Delete_Task(i);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff92 	bl	800143c <SCH_Delete_Task>
	for(i = 0; i < SCH_MAX_TASKS; i++)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	3301      	adds	r3, #1
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b27      	cmp	r3, #39	@ 0x27
 8001522:	d9f5      	bls.n	8001510 <SCH_Init+0xc>
	}
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001534:	f000 fbd0 	bl	8001cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001538:	f000 f824 	bl	8001584 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //System_Initialization();
  SCH_Init();
 800153c:	f7ff ffe2 	bl	8001504 <SCH_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001540:	f000 f8a8 	bl	8001694 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001544:	f000 f85a 	bl	80015fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001548:	480a      	ldr	r0, [pc, #40]	@ (8001574 <main+0x44>)
 800154a:	f001 fb27 	bl	8002b9c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(fsm_auto, 0, 1);
 800154e:	2201      	movs	r2, #1
 8001550:	2100      	movs	r1, #0
 8001552:	4809      	ldr	r0, [pc, #36]	@ (8001578 <main+0x48>)
 8001554:	f7ff fee6 	bl	8001324 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual, 0, 1);
 8001558:	2201      	movs	r2, #1
 800155a:	2100      	movs	r1, #0
 800155c:	4807      	ldr	r0, [pc, #28]	@ (800157c <main+0x4c>)
 800155e:	f7ff fee1 	bl	8001324 <SCH_Add_Task>
  SCH_Add_Task(fsm_setting, 0, 1);
 8001562:	2201      	movs	r2, #1
 8001564:	2100      	movs	r1, #0
 8001566:	4806      	ldr	r0, [pc, #24]	@ (8001580 <main+0x50>)
 8001568:	f7ff fedc 	bl	8001324 <SCH_Add_Task>

  while (1)
  {
	  SCH_Dispatch_Tasks();
 800156c:	f7ff ff9a 	bl	80014a4 <SCH_Dispatch_Tasks>
 8001570:	e7fc      	b.n	800156c <main+0x3c>
 8001572:	bf00      	nop
 8001574:	20000324 	.word	0x20000324
 8001578:	080007b5 	.word	0x080007b5
 800157c:	08000a11 	.word	0x08000a11
 8001580:	08001319 	.word	0x08001319

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b090      	sub	sp, #64	@ 0x40
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0318 	add.w	r3, r7, #24
 800158e:	2228      	movs	r2, #40	@ 0x28
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f001 fe8e 	bl	80032b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a6:	2302      	movs	r3, #2
 80015a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015aa:	2301      	movs	r3, #1
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ae:	2310      	movs	r3, #16
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	f107 0318 	add.w	r3, r7, #24
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fec0 	bl	8002340 <HAL_RCC_OscConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015c6:	f000 f8f5 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 f92e 	bl	8002844 <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015ee:	f000 f8e1 	bl	80017b4 <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3740      	adds	r7, #64	@ 0x40
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001618:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <MX_TIM2_Init+0x94>)
 800161a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800161e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001620:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <MX_TIM2_Init+0x94>)
 8001622:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001626:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <MX_TIM2_Init+0x94>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800162e:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <MX_TIM2_Init+0x94>)
 8001630:	2209      	movs	r2, #9
 8001632:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <MX_TIM2_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <MX_TIM2_Init+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001640:	4813      	ldr	r0, [pc, #76]	@ (8001690 <MX_TIM2_Init+0x94>)
 8001642:	f001 fa5b 	bl	8002afc <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800164c:	f000 f8b2 	bl	80017b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001654:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <MX_TIM2_Init+0x94>)
 800165e:	f001 fbd9 	bl	8002e14 <HAL_TIM_ConfigClockSource>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001668:	f000 f8a4 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001674:	463b      	mov	r3, r7
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	@ (8001690 <MX_TIM2_Init+0x94>)
 800167a:	f001 fdb1 	bl	80031e0 <HAL_TIMEx_MasterConfigSynchronization>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001684:	f000 f896 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000324 	.word	0x20000324

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b28      	ldr	r3, [pc, #160]	@ (800174c <MX_GPIO_Init+0xb8>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a27      	ldr	r2, [pc, #156]	@ (800174c <MX_GPIO_Init+0xb8>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b25      	ldr	r3, [pc, #148]	@ (800174c <MX_GPIO_Init+0xb8>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c0:	4b22      	ldr	r3, [pc, #136]	@ (800174c <MX_GPIO_Init+0xb8>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a21      	ldr	r2, [pc, #132]	@ (800174c <MX_GPIO_Init+0xb8>)
 80016c6:	f043 0308 	orr.w	r3, r3, #8
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b1f      	ldr	r3, [pc, #124]	@ (800174c <MX_GPIO_Init+0xb8>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_timer_Pin|led_button_Pin|en0_Pin|en1_Pin
 80016d8:	2200      	movs	r2, #0
 80016da:	f24f 01a0 	movw	r1, #61600	@ 0xf0a0
 80016de:	481c      	ldr	r0, [pc, #112]	@ (8001750 <MX_GPIO_Init+0xbc>)
 80016e0:	f000 fdfd 	bl	80022de <HAL_GPIO_WritePin>
                          |en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|r1_Pin
 80016e4:	2200      	movs	r2, #0
 80016e6:	f247 31ff 	movw	r1, #29695	@ 0x73ff
 80016ea:	481a      	ldr	r0, [pc, #104]	@ (8001754 <MX_GPIO_Init+0xc0>)
 80016ec:	f000 fdf7 	bl	80022de <HAL_GPIO_WritePin>
                          |y1_Pin|g1_Pin|d_Pin|e_Pin
                          |f_Pin|g_Pin|r0_Pin|y0_Pin
                          |g0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : btn1_Pin btn2_Pin btn3_Pin */
  GPIO_InitStruct.Pin = btn1_Pin|btn2_Pin|btn3_Pin;
 80016f0:	230e      	movs	r3, #14
 80016f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4619      	mov	r1, r3
 8001702:	4813      	ldr	r0, [pc, #76]	@ (8001750 <MX_GPIO_Init+0xbc>)
 8001704:	f000 fc58 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_timer_Pin led_button_Pin en0_Pin en1_Pin
                           en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = led_timer_Pin|led_button_Pin|en0_Pin|en1_Pin
 8001708:	f24f 03a0 	movw	r3, #61600	@ 0xf0a0
 800170c:	60bb      	str	r3, [r7, #8]
                          |en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2302      	movs	r3, #2
 8001718:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4619      	mov	r1, r3
 8001720:	480b      	ldr	r0, [pc, #44]	@ (8001750 <MX_GPIO_Init+0xbc>)
 8001722:	f000 fc49 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin r1_Pin
                           y1_Pin g1_Pin d_Pin e_Pin
                           f_Pin g_Pin r0_Pin y0_Pin
                           g0_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|r1_Pin
 8001726:	f247 33ff 	movw	r3, #29695	@ 0x73ff
 800172a:	60bb      	str	r3, [r7, #8]
                          |y1_Pin|g1_Pin|d_Pin|e_Pin
                          |f_Pin|g_Pin|r0_Pin|y0_Pin
                          |g0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2302      	movs	r3, #2
 8001736:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4619      	mov	r1, r3
 800173e:	4805      	ldr	r0, [pc, #20]	@ (8001754 <MX_GPIO_Init+0xc0>)
 8001740:	f000 fc3a 	bl	8001fb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001744:	bf00      	nop
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000
 8001750:	40010800 	.word	0x40010800
 8001754:	40010c00 	.word	0x40010c00

08001758 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int i = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8001760:	f7fe ff30 	bl	80005c4 <getKeyInput>
	timer_run();
 8001764:	f000 f84a 	bl	80017fc <timer_run>
    if(i < 10) i++;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b09      	cmp	r3, #9
 800176e:	dc05      	bgt.n	800177c <HAL_TIM_PeriodElapsedCallback+0x24>
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	4a0e      	ldr	r2, [pc, #56]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001778:	6013      	str	r3, [r2, #0]
    {
    	uint32_t Index = 0;
    	for (Index = 0; Index < SCH_MAX_TASKS; Index++) SCH_Update(Index);
    	i = 0;
    }
}
 800177a:	e014      	b.n	80017a6 <HAL_TIM_PeriodElapsedCallback+0x4e>
    else if (i == 10)
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b0a      	cmp	r3, #10
 8001782:	d110      	bne.n	80017a6 <HAL_TIM_PeriodElapsedCallback+0x4e>
    	uint32_t Index = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
    	for (Index = 0; Index < SCH_MAX_TASKS; Index++) SCH_Update(Index);
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e005      	b.n	800179a <HAL_TIM_PeriodElapsedCallback+0x42>
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7ff fe08 	bl	80013a4 <SCH_Update>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3301      	adds	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b27      	cmp	r3, #39	@ 0x27
 800179e:	d9f6      	bls.n	800178e <HAL_TIM_PeriodElapsedCallback+0x36>
    	i = 0;
 80017a0:	4b03      	ldr	r3, [pc, #12]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000036c 	.word	0x2000036c

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <Error_Handler+0x8>

080017c0 <set_timer>:
int tick = 10;
int timer_flag[100];
int timer_counter[100];

void set_timer(int index, int counter)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 80017ca:	4a09      	ldr	r2, [pc, #36]	@ (80017f0 <set_timer+0x30>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2100      	movs	r1, #0
 80017d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter/tick;
 80017d4:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <set_timer+0x34>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	fb92 f2f3 	sdiv	r2, r2, r3
 80017de:	4906      	ldr	r1, [pc, #24]	@ (80017f8 <set_timer+0x38>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	20000370 	.word	0x20000370
 80017f4:	20000038 	.word	0x20000038
 80017f8:	20000500 	.word	0x20000500

080017fc <timer_run>:
void led_timer()
{
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}
void timer_run()
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++)
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	e01c      	b.n	8001842 <timer_run+0x46>
	{
		if (timer_counter[i] >= 0)
 8001808:	4a12      	ldr	r2, [pc, #72]	@ (8001854 <timer_run+0x58>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db13      	blt.n	800183c <timer_run+0x40>
		{
			timer_counter[i]--;
 8001814:	4a0f      	ldr	r2, [pc, #60]	@ (8001854 <timer_run+0x58>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	1e5a      	subs	r2, r3, #1
 800181e:	490d      	ldr	r1, [pc, #52]	@ (8001854 <timer_run+0x58>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0)
 8001826:	4a0b      	ldr	r2, [pc, #44]	@ (8001854 <timer_run+0x58>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	2b00      	cmp	r3, #0
 8001830:	dc04      	bgt.n	800183c <timer_run+0x40>
			{
				timer_flag[i] = 1;
 8001832:	4a09      	ldr	r2, [pc, #36]	@ (8001858 <timer_run+0x5c>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2101      	movs	r1, #1
 8001838:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b09      	cmp	r3, #9
 8001846:	dddf      	ble.n	8001808 <timer_run+0xc>
			}
		}
	}
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	20000500 	.word	0x20000500
 8001858:	20000370 	.word	0x20000370

0800185c <is_timer_expired>:

int is_timer_expired(int index) {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    if (index < 0 || index >= 100) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	db02      	blt.n	8001870 <is_timer_expired+0x14>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b63      	cmp	r3, #99	@ 0x63
 800186e:	dd02      	ble.n	8001876 <is_timer_expired+0x1a>
        return -1;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	e003      	b.n	800187e <is_timer_expired+0x22>
    }
    return timer_flag[index];
 8001876:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <is_timer_expired+0x2c>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	20000370 	.word	0x20000370

0800188c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <HAL_MspInit+0x5c>)
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <HAL_MspInit+0x5c>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6193      	str	r3, [r2, #24]
 800189e:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_MspInit+0x5c>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b0f      	ldr	r3, [pc, #60]	@ (80018e8 <HAL_MspInit+0x5c>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	4a0e      	ldr	r2, [pc, #56]	@ (80018e8 <HAL_MspInit+0x5c>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b4:	61d3      	str	r3, [r2, #28]
 80018b6:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <HAL_MspInit+0x5c>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80018c2:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <HAL_MspInit+0x60>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <HAL_MspInit+0x60>)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000

080018f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001900:	d113      	bne.n	800192a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001902:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <HAL_TIM_Base_MspInit+0x44>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a0b      	ldr	r2, [pc, #44]	@ (8001934 <HAL_TIM_Base_MspInit+0x44>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	61d3      	str	r3, [r2, #28]
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_TIM_Base_MspInit+0x44>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	201c      	movs	r0, #28
 8001920:	f000 fb13 	bl	8001f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001924:	201c      	movs	r0, #28
 8001926:	f000 fb2c 	bl	8001f82 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <NMI_Handler+0x4>

08001940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <MemManage_Handler+0x4>

08001950 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <UsageFault_Handler+0x4>

08001960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f000 f9ec 	bl	8001d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <TIM2_IRQHandler+0x10>)
 8001996:	f001 f94d 	bl	8002c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000324 	.word	0x20000324

080019a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <led_red_and_green>:
 *  Created on: Nov 2, 2024
 *      Author: QUÝ
 */
#include "traffic_light.h"

void led_red_and_green(){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2180      	movs	r1, #128	@ 0x80
 80019b8:	4811      	ldr	r0, [pc, #68]	@ (8001a00 <led_red_and_green+0x50>)
 80019ba:	f000 fc90 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c4:	480e      	ldr	r0, [pc, #56]	@ (8001a00 <led_red_and_green+0x50>)
 80019c6:	f000 fc8a 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019d0:	480b      	ldr	r0, [pc, #44]	@ (8001a00 <led_red_and_green+0x50>)
 80019d2:	f000 fc84 	bl	80022de <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80019d6:	2201      	movs	r2, #1
 80019d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019dc:	4808      	ldr	r0, [pc, #32]	@ (8001a00 <led_red_and_green+0x50>)
 80019de:	f000 fc7e 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019e8:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <led_red_and_green+0x50>)
 80019ea:	f000 fc78 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019f4:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <led_red_and_green+0x50>)
 80019f6:	f000 fc72 	bl	80022de <HAL_GPIO_WritePin>
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40010c00 	.word	0x40010c00

08001a04 <led_red_and_yellow>:

void led_red_and_yellow(){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2180      	movs	r1, #128	@ 0x80
 8001a0c:	4811      	ldr	r0, [pc, #68]	@ (8001a54 <led_red_and_yellow+0x50>)
 8001a0e:	f000 fc66 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a18:	480e      	ldr	r0, [pc, #56]	@ (8001a54 <led_red_and_yellow+0x50>)
 8001a1a:	f000 fc60 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a24:	480b      	ldr	r0, [pc, #44]	@ (8001a54 <led_red_and_yellow+0x50>)
 8001a26:	f000 fc5a 	bl	80022de <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a30:	4808      	ldr	r0, [pc, #32]	@ (8001a54 <led_red_and_yellow+0x50>)
 8001a32:	f000 fc54 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a3c:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <led_red_and_yellow+0x50>)
 8001a3e:	f000 fc4e 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a48:	4802      	ldr	r0, [pc, #8]	@ (8001a54 <led_red_and_yellow+0x50>)
 8001a4a:	f000 fc48 	bl	80022de <HAL_GPIO_WritePin>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40010c00 	.word	0x40010c00

08001a58 <led_green_and_red>:

void led_green_and_red(){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	2180      	movs	r1, #128	@ 0x80
 8001a60:	4811      	ldr	r0, [pc, #68]	@ (8001aa8 <led_green_and_red+0x50>)
 8001a62:	f000 fc3c 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a6c:	480e      	ldr	r0, [pc, #56]	@ (8001aa8 <led_green_and_red+0x50>)
 8001a6e:	f000 fc36 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a78:	480b      	ldr	r0, [pc, #44]	@ (8001aa8 <led_green_and_red+0x50>)
 8001a7a:	f000 fc30 	bl	80022de <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a84:	4808      	ldr	r0, [pc, #32]	@ (8001aa8 <led_green_and_red+0x50>)
 8001a86:	f000 fc2a 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a90:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <led_green_and_red+0x50>)
 8001a92:	f000 fc24 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8001a96:	2201      	movs	r2, #1
 8001a98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <led_green_and_red+0x50>)
 8001a9e:	f000 fc1e 	bl	80022de <HAL_GPIO_WritePin>
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40010c00 	.word	0x40010c00

08001aac <led_yellow_and_red>:

void led_yellow_and_red(){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2180      	movs	r1, #128	@ 0x80
 8001ab4:	4811      	ldr	r0, [pc, #68]	@ (8001afc <led_yellow_and_red+0x50>)
 8001ab6:	f000 fc12 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ac0:	480e      	ldr	r0, [pc, #56]	@ (8001afc <led_yellow_and_red+0x50>)
 8001ac2:	f000 fc0c 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001acc:	480b      	ldr	r0, [pc, #44]	@ (8001afc <led_yellow_and_red+0x50>)
 8001ace:	f000 fc06 	bl	80022de <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ad8:	4808      	ldr	r0, [pc, #32]	@ (8001afc <led_yellow_and_red+0x50>)
 8001ada:	f000 fc00 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ae4:	4805      	ldr	r0, [pc, #20]	@ (8001afc <led_yellow_and_red+0x50>)
 8001ae6:	f000 fbfa 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <led_yellow_and_red+0x50>)
 8001af2:	f000 fbf4 	bl	80022de <HAL_GPIO_WritePin>
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40010c00 	.word	0x40010c00

08001b00 <clear>:

void clear()
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2180      	movs	r1, #128	@ 0x80
 8001b08:	4811      	ldr	r0, [pc, #68]	@ (8001b50 <clear+0x50>)
 8001b0a:	f000 fbe8 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b14:	480e      	ldr	r0, [pc, #56]	@ (8001b50 <clear+0x50>)
 8001b16:	f000 fbe2 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b20:	480b      	ldr	r0, [pc, #44]	@ (8001b50 <clear+0x50>)
 8001b22:	f000 fbdc 	bl	80022de <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b2c:	4808      	ldr	r0, [pc, #32]	@ (8001b50 <clear+0x50>)
 8001b2e:	f000 fbd6 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b38:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <clear+0x50>)
 8001b3a:	f000 fbd0 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <clear+0x50>)
 8001b46:	f000 fbca 	bl	80022de <HAL_GPIO_WritePin>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40010c00 	.word	0x40010c00

08001b54 <toggle>:

void toggle()
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001b58:	2180      	movs	r1, #128	@ 0x80
 8001b5a:	480f      	ldr	r0, [pc, #60]	@ (8001b98 <toggle+0x44>)
 8001b5c:	f000 fbd7 	bl	800230e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001b60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b64:	480c      	ldr	r0, [pc, #48]	@ (8001b98 <toggle+0x44>)
 8001b66:	f000 fbd2 	bl	800230e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001b6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b6e:	480a      	ldr	r0, [pc, #40]	@ (8001b98 <toggle+0x44>)
 8001b70:	f000 fbcd 	bl	800230e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001b74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b78:	4807      	ldr	r0, [pc, #28]	@ (8001b98 <toggle+0x44>)
 8001b7a:	f000 fbc8 	bl	800230e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001b7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b82:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <toggle+0x44>)
 8001b84:	f000 fbc3 	bl	800230e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001b88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b8c:	4802      	ldr	r0, [pc, #8]	@ (8001b98 <toggle+0x44>)
 8001b8e:	f000 fbbe 	bl	800230e <HAL_GPIO_TogglePin>
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40010c00 	.word	0x40010c00

08001b9c <togglered>:

void togglered()
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ba6:	4810      	ldr	r0, [pc, #64]	@ (8001be8 <togglered+0x4c>)
 8001ba8:	f000 fb99 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bb2:	480d      	ldr	r0, [pc, #52]	@ (8001be8 <togglered+0x4c>)
 8001bb4:	f000 fb93 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bbe:	480a      	ldr	r0, [pc, #40]	@ (8001be8 <togglered+0x4c>)
 8001bc0:	f000 fb8d 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bca:	4807      	ldr	r0, [pc, #28]	@ (8001be8 <togglered+0x4c>)
 8001bcc:	f000 fb87 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001bd0:	2180      	movs	r1, #128	@ 0x80
 8001bd2:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <togglered+0x4c>)
 8001bd4:	f000 fb9b 	bl	800230e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001bd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bdc:	4802      	ldr	r0, [pc, #8]	@ (8001be8 <togglered+0x4c>)
 8001bde:	f000 fb96 	bl	800230e <HAL_GPIO_TogglePin>
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40010c00 	.word	0x40010c00

08001bec <toggleyellow>:
void toggleyellow()
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2180      	movs	r1, #128	@ 0x80
 8001bf4:	4810      	ldr	r0, [pc, #64]	@ (8001c38 <toggleyellow+0x4c>)
 8001bf6:	f000 fb72 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c00:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <toggleyellow+0x4c>)
 8001c02:	f000 fb6c 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c0c:	480a      	ldr	r0, [pc, #40]	@ (8001c38 <toggleyellow+0x4c>)
 8001c0e:	f000 fb66 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c18:	4807      	ldr	r0, [pc, #28]	@ (8001c38 <toggleyellow+0x4c>)
 8001c1a:	f000 fb60 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8001c1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c22:	4805      	ldr	r0, [pc, #20]	@ (8001c38 <toggleyellow+0x4c>)
 8001c24:	f000 fb73 	bl	800230e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001c28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <toggleyellow+0x4c>)
 8001c2e:	f000 fb6e 	bl	800230e <HAL_GPIO_TogglePin>
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40010c00 	.word	0x40010c00

08001c3c <togglegreen>:
void togglegreen()
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2180      	movs	r1, #128	@ 0x80
 8001c44:	4810      	ldr	r0, [pc, #64]	@ (8001c88 <togglegreen+0x4c>)
 8001c46:	f000 fb4a 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c50:	480d      	ldr	r0, [pc, #52]	@ (8001c88 <togglegreen+0x4c>)
 8001c52:	f000 fb44 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c5c:	480a      	ldr	r0, [pc, #40]	@ (8001c88 <togglegreen+0x4c>)
 8001c5e:	f000 fb3e 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c68:	4807      	ldr	r0, [pc, #28]	@ (8001c88 <togglegreen+0x4c>)
 8001c6a:	f000 fb38 	bl	80022de <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001c6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c72:	4805      	ldr	r0, [pc, #20]	@ (8001c88 <togglegreen+0x4c>)
 8001c74:	f000 fb4b 	bl	800230e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001c78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c7c:	4802      	ldr	r0, [pc, #8]	@ (8001c88 <togglegreen+0x4c>)
 8001c7e:	f000 fb46 	bl	800230e <HAL_GPIO_TogglePin>
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40010c00 	.word	0x40010c00

08001c8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c8c:	f7ff fe8a 	bl	80019a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c90:	480b      	ldr	r0, [pc, #44]	@ (8001cc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c92:	490c      	ldr	r1, [pc, #48]	@ (8001cc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c94:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c98:	e002      	b.n	8001ca0 <LoopCopyDataInit>

08001c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9e:	3304      	adds	r3, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca4:	d3f9      	bcc.n	8001c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca6:	4a09      	ldr	r2, [pc, #36]	@ (8001ccc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ca8:	4c09      	ldr	r4, [pc, #36]	@ (8001cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cac:	e001      	b.n	8001cb2 <LoopFillZerobss>

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb0:	3204      	adds	r2, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f001 fb05 	bl	80032c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cba:	f7ff fc39 	bl	8001530 <main>
  bx lr
 8001cbe:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc4:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001cc8:	08003350 	.word	0x08003350
  ldr r2, =_sbss
 8001ccc:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001cd0:	20000694 	.word	0x20000694

08001cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC1_2_IRQHandler>
	...

08001cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_Init+0x28>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <HAL_Init+0x28>)
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f000 f923 	bl	8001f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cee:	200f      	movs	r0, #15
 8001cf0:	f000 f808 	bl	8001d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf4:	f7ff fdca 	bl	800188c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40022000 	.word	0x40022000

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d0c:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_InitTick+0x54>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_InitTick+0x58>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f93b 	bl	8001f9e <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00e      	b.n	8001d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	d80a      	bhi.n	8001d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f000 f903 	bl	8001f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d44:	4a06      	ldr	r2, [pc, #24]	@ (8001d60 <HAL_InitTick+0x5c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	2000003c 	.word	0x2000003c
 8001d5c:	20000044 	.word	0x20000044
 8001d60:	20000040 	.word	0x20000040

08001d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_IncTick+0x1c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a03      	ldr	r2, [pc, #12]	@ (8001d84 <HAL_IncTick+0x20>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	20000044 	.word	0x20000044
 8001d84:	20000690 	.word	0x20000690

08001d88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d8c:	4b02      	ldr	r3, [pc, #8]	@ (8001d98 <HAL_GetTick+0x10>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	20000690 	.word	0x20000690

08001d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4906      	ldr	r1, [pc, #24]	@ (8001e34 <__NVIC_EnableIRQ+0x34>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	e000e100 	.word	0xe000e100

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	@ (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	@ (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	@ 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	bf28      	it	cs
 8001eaa:	2304      	movcs	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d902      	bls.n	8001ebc <NVIC_EncodePriority+0x30>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b03      	subs	r3, #3
 8001eba:	e000      	b.n	8001ebe <NVIC_EncodePriority+0x32>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	4313      	orrs	r3, r2
         );
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	@ 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f00:	d301      	bcc.n	8001f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00f      	b.n	8001f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f06:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <SysTick_Config+0x40>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f7ff ff90 	bl	8001e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <SysTick_Config+0x40>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1e:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <SysTick_Config+0x40>)
 8001f20:	2207      	movs	r2, #7
 8001f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000e010 	.word	0xe000e010

08001f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff2d 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5c:	f7ff ff42 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7ff ff90 	bl	8001e8c <NVIC_EncodePriority>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff5f 	bl	8001e38 <__NVIC_SetPriority>
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff35 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ffa2 	bl	8001ef0 <SysTick_Config>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b08b      	sub	sp, #44	@ 0x2c
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fca:	e161      	b.n	8002290 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	f040 8150 	bne.w	800228a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4a97      	ldr	r2, [pc, #604]	@ (800224c <HAL_GPIO_Init+0x294>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d05e      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 8001ff4:	4a95      	ldr	r2, [pc, #596]	@ (800224c <HAL_GPIO_Init+0x294>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d875      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 8001ffa:	4a95      	ldr	r2, [pc, #596]	@ (8002250 <HAL_GPIO_Init+0x298>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d058      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 8002000:	4a93      	ldr	r2, [pc, #588]	@ (8002250 <HAL_GPIO_Init+0x298>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d86f      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 8002006:	4a93      	ldr	r2, [pc, #588]	@ (8002254 <HAL_GPIO_Init+0x29c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d052      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 800200c:	4a91      	ldr	r2, [pc, #580]	@ (8002254 <HAL_GPIO_Init+0x29c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d869      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 8002012:	4a91      	ldr	r2, [pc, #580]	@ (8002258 <HAL_GPIO_Init+0x2a0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d04c      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 8002018:	4a8f      	ldr	r2, [pc, #572]	@ (8002258 <HAL_GPIO_Init+0x2a0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d863      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 800201e:	4a8f      	ldr	r2, [pc, #572]	@ (800225c <HAL_GPIO_Init+0x2a4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d046      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 8002024:	4a8d      	ldr	r2, [pc, #564]	@ (800225c <HAL_GPIO_Init+0x2a4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d85d      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 800202a:	2b12      	cmp	r3, #18
 800202c:	d82a      	bhi.n	8002084 <HAL_GPIO_Init+0xcc>
 800202e:	2b12      	cmp	r3, #18
 8002030:	d859      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 8002032:	a201      	add	r2, pc, #4	@ (adr r2, 8002038 <HAL_GPIO_Init+0x80>)
 8002034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002038:	080020b3 	.word	0x080020b3
 800203c:	0800208d 	.word	0x0800208d
 8002040:	0800209f 	.word	0x0800209f
 8002044:	080020e1 	.word	0x080020e1
 8002048:	080020e7 	.word	0x080020e7
 800204c:	080020e7 	.word	0x080020e7
 8002050:	080020e7 	.word	0x080020e7
 8002054:	080020e7 	.word	0x080020e7
 8002058:	080020e7 	.word	0x080020e7
 800205c:	080020e7 	.word	0x080020e7
 8002060:	080020e7 	.word	0x080020e7
 8002064:	080020e7 	.word	0x080020e7
 8002068:	080020e7 	.word	0x080020e7
 800206c:	080020e7 	.word	0x080020e7
 8002070:	080020e7 	.word	0x080020e7
 8002074:	080020e7 	.word	0x080020e7
 8002078:	080020e7 	.word	0x080020e7
 800207c:	08002095 	.word	0x08002095
 8002080:	080020a9 	.word	0x080020a9
 8002084:	4a76      	ldr	r2, [pc, #472]	@ (8002260 <HAL_GPIO_Init+0x2a8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800208a:	e02c      	b.n	80020e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	623b      	str	r3, [r7, #32]
          break;
 8002092:	e029      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	3304      	adds	r3, #4
 800209a:	623b      	str	r3, [r7, #32]
          break;
 800209c:	e024      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	3308      	adds	r3, #8
 80020a4:	623b      	str	r3, [r7, #32]
          break;
 80020a6:	e01f      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	330c      	adds	r3, #12
 80020ae:	623b      	str	r3, [r7, #32]
          break;
 80020b0:	e01a      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d102      	bne.n	80020c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ba:	2304      	movs	r3, #4
 80020bc:	623b      	str	r3, [r7, #32]
          break;
 80020be:	e013      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c8:	2308      	movs	r3, #8
 80020ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	611a      	str	r2, [r3, #16]
          break;
 80020d2:	e009      	b.n	80020e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020d4:	2308      	movs	r3, #8
 80020d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	615a      	str	r2, [r3, #20]
          break;
 80020de:	e003      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
          break;
 80020e4:	e000      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          break;
 80020e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2bff      	cmp	r3, #255	@ 0xff
 80020ec:	d801      	bhi.n	80020f2 <HAL_GPIO_Init+0x13a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	e001      	b.n	80020f6 <HAL_GPIO_Init+0x13e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3304      	adds	r3, #4
 80020f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2bff      	cmp	r3, #255	@ 0xff
 80020fc:	d802      	bhi.n	8002104 <HAL_GPIO_Init+0x14c>
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	e002      	b.n	800210a <HAL_GPIO_Init+0x152>
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	3b08      	subs	r3, #8
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	210f      	movs	r1, #15
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	401a      	ands	r2, r3
 800211c:	6a39      	ldr	r1, [r7, #32]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	431a      	orrs	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80a9 	beq.w	800228a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002138:	4b4a      	ldr	r3, [pc, #296]	@ (8002264 <HAL_GPIO_Init+0x2ac>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	4a49      	ldr	r2, [pc, #292]	@ (8002264 <HAL_GPIO_Init+0x2ac>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6193      	str	r3, [r2, #24]
 8002144:	4b47      	ldr	r3, [pc, #284]	@ (8002264 <HAL_GPIO_Init+0x2ac>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002150:	4a45      	ldr	r2, [pc, #276]	@ (8002268 <HAL_GPIO_Init+0x2b0>)
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	3302      	adds	r3, #2
 8002158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	220f      	movs	r2, #15
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4013      	ands	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a3d      	ldr	r2, [pc, #244]	@ (800226c <HAL_GPIO_Init+0x2b4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00d      	beq.n	8002198 <HAL_GPIO_Init+0x1e0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a3c      	ldr	r2, [pc, #240]	@ (8002270 <HAL_GPIO_Init+0x2b8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d007      	beq.n	8002194 <HAL_GPIO_Init+0x1dc>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a3b      	ldr	r2, [pc, #236]	@ (8002274 <HAL_GPIO_Init+0x2bc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d101      	bne.n	8002190 <HAL_GPIO_Init+0x1d8>
 800218c:	2302      	movs	r3, #2
 800218e:	e004      	b.n	800219a <HAL_GPIO_Init+0x1e2>
 8002190:	2303      	movs	r3, #3
 8002192:	e002      	b.n	800219a <HAL_GPIO_Init+0x1e2>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <HAL_GPIO_Init+0x1e2>
 8002198:	2300      	movs	r3, #0
 800219a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800219c:	f002 0203 	and.w	r2, r2, #3
 80021a0:	0092      	lsls	r2, r2, #2
 80021a2:	4093      	lsls	r3, r2
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021aa:	492f      	ldr	r1, [pc, #188]	@ (8002268 <HAL_GPIO_Init+0x2b0>)
 80021ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	3302      	adds	r3, #2
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d006      	beq.n	80021d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	492b      	ldr	r1, [pc, #172]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021d2:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	43db      	mvns	r3, r3
 80021da:	4927      	ldr	r1, [pc, #156]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 80021dc:	4013      	ands	r3, r2
 80021de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d006      	beq.n	80021fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021ec:	4b22      	ldr	r3, [pc, #136]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	4921      	ldr	r1, [pc, #132]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60cb      	str	r3, [r1, #12]
 80021f8:	e006      	b.n	8002208 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	43db      	mvns	r3, r3
 8002202:	491d      	ldr	r1, [pc, #116]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 8002204:	4013      	ands	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d006      	beq.n	8002222 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002214:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4917      	ldr	r1, [pc, #92]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
 8002220:	e006      	b.n	8002230 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	43db      	mvns	r3, r3
 800222a:	4913      	ldr	r1, [pc, #76]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 800222c:	4013      	ands	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01f      	beq.n	800227c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	490d      	ldr	r1, [pc, #52]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]
 8002248:	e01f      	b.n	800228a <HAL_GPIO_Init+0x2d2>
 800224a:	bf00      	nop
 800224c:	10320000 	.word	0x10320000
 8002250:	10310000 	.word	0x10310000
 8002254:	10220000 	.word	0x10220000
 8002258:	10210000 	.word	0x10210000
 800225c:	10120000 	.word	0x10120000
 8002260:	10110000 	.word	0x10110000
 8002264:	40021000 	.word	0x40021000
 8002268:	40010000 	.word	0x40010000
 800226c:	40010800 	.word	0x40010800
 8002270:	40010c00 	.word	0x40010c00
 8002274:	40011000 	.word	0x40011000
 8002278:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800227c:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <HAL_GPIO_Init+0x2f4>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	43db      	mvns	r3, r3
 8002284:	4909      	ldr	r1, [pc, #36]	@ (80022ac <HAL_GPIO_Init+0x2f4>)
 8002286:	4013      	ands	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	3301      	adds	r3, #1
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002296:	fa22 f303 	lsr.w	r3, r2, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	f47f ae96 	bne.w	8001fcc <HAL_GPIO_Init+0x14>
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	372c      	adds	r7, #44	@ 0x2c
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	40010400 	.word	0x40010400

080022b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e001      	b.n	80022d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	807b      	strh	r3, [r7, #2]
 80022ea:	4613      	mov	r3, r2
 80022ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022ee:	787b      	ldrb	r3, [r7, #1]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022f4:	887a      	ldrh	r2, [r7, #2]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022fa:	e003      	b.n	8002304 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	041a      	lsls	r2, r3, #16
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	611a      	str	r2, [r3, #16]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002320:	887a      	ldrh	r2, [r7, #2]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4013      	ands	r3, r2
 8002326:	041a      	lsls	r2, r3, #16
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	43d9      	mvns	r1, r3
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	400b      	ands	r3, r1
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	611a      	str	r2, [r3, #16]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e272      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8087 	beq.w	800246e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002360:	4b92      	ldr	r3, [pc, #584]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b04      	cmp	r3, #4
 800236a:	d00c      	beq.n	8002386 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800236c:	4b8f      	ldr	r3, [pc, #572]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	d112      	bne.n	800239e <HAL_RCC_OscConfig+0x5e>
 8002378:	4b8c      	ldr	r3, [pc, #560]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002384:	d10b      	bne.n	800239e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002386:	4b89      	ldr	r3, [pc, #548]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d06c      	beq.n	800246c <HAL_RCC_OscConfig+0x12c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d168      	bne.n	800246c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e24c      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x76>
 80023a8:	4b80      	ldr	r3, [pc, #512]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a7f      	ldr	r2, [pc, #508]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	e02e      	b.n	8002414 <HAL_RCC_OscConfig+0xd4>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x98>
 80023be:	4b7b      	ldr	r3, [pc, #492]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a7a      	ldr	r2, [pc, #488]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b78      	ldr	r3, [pc, #480]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a77      	ldr	r2, [pc, #476]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e01d      	b.n	8002414 <HAL_RCC_OscConfig+0xd4>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0xbc>
 80023e2:	4b72      	ldr	r3, [pc, #456]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a71      	ldr	r2, [pc, #452]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b6f      	ldr	r3, [pc, #444]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6e      	ldr	r2, [pc, #440]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0xd4>
 80023fc:	4b6b      	ldr	r3, [pc, #428]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a6a      	ldr	r2, [pc, #424]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b68      	ldr	r3, [pc, #416]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a67      	ldr	r2, [pc, #412]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 800240e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002412:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7ff fcb4 	bl	8001d88 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002424:	f7ff fcb0 	bl	8001d88 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	@ 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e200      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b5d      	ldr	r3, [pc, #372]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0xe4>
 8002442:	e014      	b.n	800246e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7ff fca0 	bl	8001d88 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800244c:	f7ff fc9c 	bl	8001d88 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	@ 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e1ec      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	4b53      	ldr	r3, [pc, #332]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x10c>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d063      	beq.n	8002542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800247a:	4b4c      	ldr	r3, [pc, #304]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002486:	4b49      	ldr	r3, [pc, #292]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b08      	cmp	r3, #8
 8002490:	d11c      	bne.n	80024cc <HAL_RCC_OscConfig+0x18c>
 8002492:	4b46      	ldr	r3, [pc, #280]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d116      	bne.n	80024cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	4b43      	ldr	r3, [pc, #268]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_RCC_OscConfig+0x176>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e1c0      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b6:	4b3d      	ldr	r3, [pc, #244]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4939      	ldr	r1, [pc, #228]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	e03a      	b.n	8002542 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d4:	4b36      	ldr	r3, [pc, #216]	@ (80025b0 <HAL_RCC_OscConfig+0x270>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7ff fc55 	bl	8001d88 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e2:	f7ff fc51 	bl	8001d88 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1a1      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	4b2d      	ldr	r3, [pc, #180]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002500:	4b2a      	ldr	r3, [pc, #168]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4927      	ldr	r1, [pc, #156]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
 8002514:	e015      	b.n	8002542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002516:	4b26      	ldr	r3, [pc, #152]	@ (80025b0 <HAL_RCC_OscConfig+0x270>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fc34 	bl	8001d88 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002524:	f7ff fc30 	bl	8001d88 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e180      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d03a      	beq.n	80025c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d019      	beq.n	800258a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002556:	4b17      	ldr	r3, [pc, #92]	@ (80025b4 <HAL_RCC_OscConfig+0x274>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255c:	f7ff fc14 	bl	8001d88 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002564:	f7ff fc10 	bl	8001d88 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e160      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002582:	2001      	movs	r0, #1
 8002584:	f000 fa9c 	bl	8002ac0 <RCC_Delay>
 8002588:	e01c      	b.n	80025c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258a:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <HAL_RCC_OscConfig+0x274>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002590:	f7ff fbfa 	bl	8001d88 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002596:	e00f      	b.n	80025b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002598:	f7ff fbf6 	bl	8001d88 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d908      	bls.n	80025b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e146      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	42420000 	.word	0x42420000
 80025b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	4b92      	ldr	r3, [pc, #584]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e9      	bne.n	8002598 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80a6 	beq.w	800271e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10d      	bne.n	80025fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	4b88      	ldr	r3, [pc, #544]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a87      	ldr	r2, [pc, #540]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ec:	61d3      	str	r3, [r2, #28]
 80025ee:	4b85      	ldr	r3, [pc, #532]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	4b82      	ldr	r3, [pc, #520]	@ (8002808 <HAL_RCC_OscConfig+0x4c8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260a:	4b7f      	ldr	r3, [pc, #508]	@ (8002808 <HAL_RCC_OscConfig+0x4c8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a7e      	ldr	r2, [pc, #504]	@ (8002808 <HAL_RCC_OscConfig+0x4c8>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002616:	f7ff fbb7 	bl	8001d88 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261e:	f7ff fbb3 	bl	8001d88 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b64      	cmp	r3, #100	@ 0x64
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e103      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4b75      	ldr	r3, [pc, #468]	@ (8002808 <HAL_RCC_OscConfig+0x4c8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x312>
 8002644:	4b6f      	ldr	r3, [pc, #444]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a6e      	ldr	r2, [pc, #440]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	e02d      	b.n	80026ae <HAL_RCC_OscConfig+0x36e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x334>
 800265a:	4b6a      	ldr	r3, [pc, #424]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a69      	ldr	r2, [pc, #420]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6213      	str	r3, [r2, #32]
 8002666:	4b67      	ldr	r3, [pc, #412]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a66      	ldr	r2, [pc, #408]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	e01c      	b.n	80026ae <HAL_RCC_OscConfig+0x36e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b05      	cmp	r3, #5
 800267a:	d10c      	bne.n	8002696 <HAL_RCC_OscConfig+0x356>
 800267c:	4b61      	ldr	r3, [pc, #388]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4a60      	ldr	r2, [pc, #384]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	f043 0304 	orr.w	r3, r3, #4
 8002686:	6213      	str	r3, [r2, #32]
 8002688:	4b5e      	ldr	r3, [pc, #376]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4a5d      	ldr	r2, [pc, #372]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6213      	str	r3, [r2, #32]
 8002694:	e00b      	b.n	80026ae <HAL_RCC_OscConfig+0x36e>
 8002696:	4b5b      	ldr	r3, [pc, #364]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	4a5a      	ldr	r2, [pc, #360]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	6213      	str	r3, [r2, #32]
 80026a2:	4b58      	ldr	r3, [pc, #352]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4a57      	ldr	r2, [pc, #348]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	f023 0304 	bic.w	r3, r3, #4
 80026ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d015      	beq.n	80026e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7ff fb67 	bl	8001d88 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7ff fb63 	bl	8001d88 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e0b1      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ee      	beq.n	80026be <HAL_RCC_OscConfig+0x37e>
 80026e0:	e014      	b.n	800270c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7ff fb51 	bl	8001d88 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ea:	f7ff fb4d 	bl	8001d88 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e09b      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002700:	4b40      	ldr	r3, [pc, #256]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ee      	bne.n	80026ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d105      	bne.n	800271e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002712:	4b3c      	ldr	r3, [pc, #240]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a3b      	ldr	r2, [pc, #236]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800271c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8087 	beq.w	8002836 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002728:	4b36      	ldr	r3, [pc, #216]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b08      	cmp	r3, #8
 8002732:	d061      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d146      	bne.n	80027ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273c:	4b33      	ldr	r3, [pc, #204]	@ (800280c <HAL_RCC_OscConfig+0x4cc>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7ff fb21 	bl	8001d88 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274a:	f7ff fb1d 	bl	8001d88 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e06d      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275c:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002770:	d108      	bne.n	8002784 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002772:	4b24      	ldr	r3, [pc, #144]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	4921      	ldr	r1, [pc, #132]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002784:	4b1f      	ldr	r3, [pc, #124]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a19      	ldr	r1, [r3, #32]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002794:	430b      	orrs	r3, r1
 8002796:	491b      	ldr	r1, [pc, #108]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800279c:	4b1b      	ldr	r3, [pc, #108]	@ (800280c <HAL_RCC_OscConfig+0x4cc>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7ff faf1 	bl	8001d88 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027aa:	f7ff faed 	bl	8001d88 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e03d      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027bc:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x46a>
 80027c8:	e035      	b.n	8002836 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	4b10      	ldr	r3, [pc, #64]	@ (800280c <HAL_RCC_OscConfig+0x4cc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7ff fada 	bl	8001d88 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d8:	f7ff fad6 	bl	8001d88 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e026      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x498>
 80027f6:	e01e      	b.n	8002836 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e019      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
 800280c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_RCC_OscConfig+0x500>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	429a      	cmp	r2, r3
 8002822:	d106      	bne.n	8002832 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000

08002844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0d0      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b6a      	ldr	r3, [pc, #424]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d910      	bls.n	8002888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b67      	ldr	r3, [pc, #412]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 0207 	bic.w	r2, r3, #7
 800286e:	4965      	ldr	r1, [pc, #404]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b63      	ldr	r3, [pc, #396]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0b8      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d020      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a0:	4b59      	ldr	r3, [pc, #356]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a58      	ldr	r2, [pc, #352]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b8:	4b53      	ldr	r3, [pc, #332]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a52      	ldr	r2, [pc, #328]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c4:	4b50      	ldr	r3, [pc, #320]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	494d      	ldr	r1, [pc, #308]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d040      	beq.n	8002964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	4b47      	ldr	r3, [pc, #284]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d115      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e07f      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002902:	4b41      	ldr	r3, [pc, #260]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e073      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	4b3d      	ldr	r3, [pc, #244]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06b      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002922:	4b39      	ldr	r3, [pc, #228]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f023 0203 	bic.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4936      	ldr	r1, [pc, #216]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002934:	f7ff fa28 	bl	8001d88 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7ff fa24 	bl	8001d88 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e053      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	4b2d      	ldr	r3, [pc, #180]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 020c 	and.w	r2, r3, #12
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	429a      	cmp	r2, r3
 8002962:	d1eb      	bne.n	800293c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002964:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d210      	bcs.n	8002994 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0207 	bic.w	r2, r3, #7
 800297a:	4922      	ldr	r1, [pc, #136]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e032      	b.n	80029fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a0:	4b19      	ldr	r3, [pc, #100]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4916      	ldr	r1, [pc, #88]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029be:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	490e      	ldr	r1, [pc, #56]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029d2:	f000 f821 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	490a      	ldr	r1, [pc, #40]	@ (8002a0c <HAL_RCC_ClockConfig+0x1c8>)
 80029e4:	5ccb      	ldrb	r3, [r1, r3]
 80029e6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ea:	4a09      	ldr	r2, [pc, #36]	@ (8002a10 <HAL_RCC_ClockConfig+0x1cc>)
 80029ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ee:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <HAL_RCC_ClockConfig+0x1d0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff f986 	bl	8001d04 <HAL_InitTick>

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40022000 	.word	0x40022000
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	08003324 	.word	0x08003324
 8002a10:	2000003c 	.word	0x2000003c
 8002a14:	20000040 	.word	0x20000040

08002a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a32:	4b1e      	ldr	r3, [pc, #120]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x94>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d002      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x30>
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_GetSysClockFreq+0x36>
 8002a46:	e027      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a48:	4b19      	ldr	r3, [pc, #100]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a4a:	613b      	str	r3, [r7, #16]
      break;
 8002a4c:	e027      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	0c9b      	lsrs	r3, r3, #18
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	4a17      	ldr	r2, [pc, #92]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a58:	5cd3      	ldrb	r3, [r2, r3]
 8002a5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d010      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a66:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x94>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	0c5b      	lsrs	r3, r3, #17
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	4a11      	ldr	r2, [pc, #68]	@ (8002ab8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a7a:	fb03 f202 	mul.w	r2, r3, r2
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	e004      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002abc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	613b      	str	r3, [r7, #16]
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a9a:	613b      	str	r3, [r7, #16]
      break;
 8002a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9e:	693b      	ldr	r3, [r7, #16]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	007a1200 	.word	0x007a1200
 8002ab4:	08003334 	.word	0x08003334
 8002ab8:	08003344 	.word	0x08003344
 8002abc:	003d0900 	.word	0x003d0900

08002ac0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <RCC_Delay+0x34>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0a      	ldr	r2, [pc, #40]	@ (8002af8 <RCC_Delay+0x38>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0a5b      	lsrs	r3, r3, #9
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002adc:	bf00      	nop
  }
  while (Delay --);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1e5a      	subs	r2, r3, #1
 8002ae2:	60fa      	str	r2, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f9      	bne.n	8002adc <RCC_Delay+0x1c>
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	2000003c 	.word	0x2000003c
 8002af8:	10624dd3 	.word	0x10624dd3

08002afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e041      	b.n	8002b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe fee4 	bl	80018f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3304      	adds	r3, #4
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	f000 fa56 	bl	8002fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d001      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e035      	b.n	8002c20 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a16      	ldr	r2, [pc, #88]	@ (8002c2c <HAL_TIM_Base_Start_IT+0x90>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d009      	beq.n	8002bea <HAL_TIM_Base_Start_IT+0x4e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bde:	d004      	beq.n	8002bea <HAL_TIM_Base_Start_IT+0x4e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <HAL_TIM_Base_Start_IT+0x94>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d111      	bne.n	8002c0e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b06      	cmp	r3, #6
 8002bfa:	d010      	beq.n	8002c1e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0c:	e007      	b.n	8002c1e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400

08002c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d020      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0202 	mvn.w	r2, #2
 8002c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f998 	bl	8002fb4 <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f98b 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f99a 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d020      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01b      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0204 	mvn.w	r2, #4
 8002cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f972 	bl	8002fb4 <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f965 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f974 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d020      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01b      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0208 	mvn.w	r2, #8
 8002d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2204      	movs	r2, #4
 8002d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f94c 	bl	8002fb4 <HAL_TIM_IC_CaptureCallback>
 8002d1c:	e005      	b.n	8002d2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f93f 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f94e 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d020      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01b      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0210 	mvn.w	r2, #16
 8002d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2208      	movs	r2, #8
 8002d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f926 	bl	8002fb4 <HAL_TIM_IC_CaptureCallback>
 8002d68:	e005      	b.n	8002d76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f919 	bl	8002fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f928 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0201 	mvn.w	r2, #1
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fe fcdc 	bl	8001758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00c      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fa6f 	bl	80032a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8f8 	bl	8002fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00c      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0220 	mvn.w	r2, #32
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fa42 	bl	8003290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_TIM_ConfigClockSource+0x1c>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e0b4      	b.n	8002f9a <HAL_TIM_ConfigClockSource+0x186>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e68:	d03e      	beq.n	8002ee8 <HAL_TIM_ConfigClockSource+0xd4>
 8002e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e6e:	f200 8087 	bhi.w	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e76:	f000 8086 	beq.w	8002f86 <HAL_TIM_ConfigClockSource+0x172>
 8002e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e7e:	d87f      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b70      	cmp	r3, #112	@ 0x70
 8002e82:	d01a      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0xa6>
 8002e84:	2b70      	cmp	r3, #112	@ 0x70
 8002e86:	d87b      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e88:	2b60      	cmp	r3, #96	@ 0x60
 8002e8a:	d050      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x11a>
 8002e8c:	2b60      	cmp	r3, #96	@ 0x60
 8002e8e:	d877      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e90:	2b50      	cmp	r3, #80	@ 0x50
 8002e92:	d03c      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0xfa>
 8002e94:	2b50      	cmp	r3, #80	@ 0x50
 8002e96:	d873      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002e98:	2b40      	cmp	r3, #64	@ 0x40
 8002e9a:	d058      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0x13a>
 8002e9c:	2b40      	cmp	r3, #64	@ 0x40
 8002e9e:	d86f      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea0:	2b30      	cmp	r3, #48	@ 0x30
 8002ea2:	d064      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x15a>
 8002ea4:	2b30      	cmp	r3, #48	@ 0x30
 8002ea6:	d86b      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d060      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x15a>
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d867      	bhi.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d05c      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x15a>
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d05a      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0x15a>
 8002eb8:	e062      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eca:	f000 f96a 	bl	80031a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002edc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	609a      	str	r2, [r3, #8]
      break;
 8002ee6:	e04f      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ef8:	f000 f953 	bl	80031a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f0a:	609a      	str	r2, [r3, #8]
      break;
 8002f0c:	e03c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f000 f8ca 	bl	80030b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2150      	movs	r1, #80	@ 0x50
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f921 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002f2c:	e02c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f000 f8e8 	bl	8003110 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2160      	movs	r1, #96	@ 0x60
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f911 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002f4c:	e01c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f000 f8aa 	bl	80030b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2140      	movs	r1, #64	@ 0x40
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f901 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002f6c:	e00c      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4619      	mov	r1, r3
 8002f78:	4610      	mov	r0, r2
 8002f7a:	f000 f8f8 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002f7e:	e003      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      break;
 8002f84:	e000      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr
	...

08002fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a2b      	ldr	r2, [pc, #172]	@ (80030ac <TIM_Base_SetConfig+0xc0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d007      	beq.n	8003014 <TIM_Base_SetConfig+0x28>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800300a:	d003      	beq.n	8003014 <TIM_Base_SetConfig+0x28>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a28      	ldr	r2, [pc, #160]	@ (80030b0 <TIM_Base_SetConfig+0xc4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d108      	bne.n	8003026 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800301a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a20      	ldr	r2, [pc, #128]	@ (80030ac <TIM_Base_SetConfig+0xc0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <TIM_Base_SetConfig+0x52>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003034:	d003      	beq.n	800303e <TIM_Base_SetConfig+0x52>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a1d      	ldr	r2, [pc, #116]	@ (80030b0 <TIM_Base_SetConfig+0xc4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d108      	bne.n	8003050 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a0d      	ldr	r2, [pc, #52]	@ (80030ac <TIM_Base_SetConfig+0xc0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d103      	bne.n	8003084 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f023 0201 	bic.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]
  }
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	40012c00 	.word	0x40012c00
 80030b0:	40000400 	.word	0x40000400

080030b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f023 0201 	bic.w	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f023 030a 	bic.w	r3, r3, #10
 80030f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	621a      	str	r2, [r3, #32]
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f023 0210 	bic.w	r2, r3, #16
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800313a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	031b      	lsls	r3, r3, #12
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800314c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	621a      	str	r2, [r3, #32]
}
 8003164:	bf00      	nop
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	f043 0307 	orr.w	r3, r3, #7
 8003190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	609a      	str	r2, [r3, #8]
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b087      	sub	sp, #28
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	021a      	lsls	r2, r3, #8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	609a      	str	r2, [r3, #8]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e041      	b.n	800327c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800321e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a14      	ldr	r2, [pc, #80]	@ (8003288 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003244:	d004      	beq.n	8003250 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a10      	ldr	r2, [pc, #64]	@ (800328c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d10c      	bne.n	800326a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003256:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	4313      	orrs	r3, r2
 8003260:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40000400 	.word	0x40000400

08003290 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr

080032a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <memset>:
 80032b4:	4603      	mov	r3, r0
 80032b6:	4402      	add	r2, r0
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d100      	bne.n	80032be <memset+0xa>
 80032bc:	4770      	bx	lr
 80032be:	f803 1b01 	strb.w	r1, [r3], #1
 80032c2:	e7f9      	b.n	80032b8 <memset+0x4>

080032c4 <__libc_init_array>:
 80032c4:	b570      	push	{r4, r5, r6, lr}
 80032c6:	2600      	movs	r6, #0
 80032c8:	4d0c      	ldr	r5, [pc, #48]	@ (80032fc <__libc_init_array+0x38>)
 80032ca:	4c0d      	ldr	r4, [pc, #52]	@ (8003300 <__libc_init_array+0x3c>)
 80032cc:	1b64      	subs	r4, r4, r5
 80032ce:	10a4      	asrs	r4, r4, #2
 80032d0:	42a6      	cmp	r6, r4
 80032d2:	d109      	bne.n	80032e8 <__libc_init_array+0x24>
 80032d4:	f000 f81a 	bl	800330c <_init>
 80032d8:	2600      	movs	r6, #0
 80032da:	4d0a      	ldr	r5, [pc, #40]	@ (8003304 <__libc_init_array+0x40>)
 80032dc:	4c0a      	ldr	r4, [pc, #40]	@ (8003308 <__libc_init_array+0x44>)
 80032de:	1b64      	subs	r4, r4, r5
 80032e0:	10a4      	asrs	r4, r4, #2
 80032e2:	42a6      	cmp	r6, r4
 80032e4:	d105      	bne.n	80032f2 <__libc_init_array+0x2e>
 80032e6:	bd70      	pop	{r4, r5, r6, pc}
 80032e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ec:	4798      	blx	r3
 80032ee:	3601      	adds	r6, #1
 80032f0:	e7ee      	b.n	80032d0 <__libc_init_array+0xc>
 80032f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f6:	4798      	blx	r3
 80032f8:	3601      	adds	r6, #1
 80032fa:	e7f2      	b.n	80032e2 <__libc_init_array+0x1e>
 80032fc:	08003348 	.word	0x08003348
 8003300:	08003348 	.word	0x08003348
 8003304:	08003348 	.word	0x08003348
 8003308:	0800334c 	.word	0x0800334c

0800330c <_init>:
 800330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330e:	bf00      	nop
 8003310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003312:	bc08      	pop	{r3}
 8003314:	469e      	mov	lr, r3
 8003316:	4770      	bx	lr

08003318 <_fini>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	bf00      	nop
 800331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331e:	bc08      	pop	{r3}
 8003320:	469e      	mov	lr, r3
 8003322:	4770      	bx	lr
